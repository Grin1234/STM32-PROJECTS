
ULTRASONIC-DISTANCE-SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004164  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080042f4  080042f4  000052f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004348  08004348  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004348  08004348  00005348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004350  08004350  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004350  08004350  00005350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004354  08004354  00005354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004358  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          000001cc  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000234  20000234  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009765  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000192c  00000000  00000000  0000f7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  00011130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e8  00000000  00000000  00011b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215b0  00000000  00000000  00012368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b29c  00000000  00000000  00033918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca6e7  00000000  00000000  0003ebb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010929b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003340  00000000  00000000  001092e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0010c620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080042dc 	.word	0x080042dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080042dc 	.word	0x080042dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b988 	b.w	8000d84 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	468e      	mov	lr, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	4688      	mov	r8, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d962      	bls.n	8000b68 <__udivmoddi4+0xdc>
 8000aa2:	fab2 f682 	clz	r6, r2
 8000aa6:	b14e      	cbz	r6, 8000abc <__udivmoddi4+0x30>
 8000aa8:	f1c6 0320 	rsb	r3, r6, #32
 8000aac:	fa01 f806 	lsl.w	r8, r1, r6
 8000ab0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab4:	40b7      	lsls	r7, r6
 8000ab6:	ea43 0808 	orr.w	r8, r3, r8
 8000aba:	40b4      	lsls	r4, r6
 8000abc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac0:	fa1f fc87 	uxth.w	ip, r7
 8000ac4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac8:	0c23      	lsrs	r3, r4, #16
 8000aca:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ace:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ae0:	f080 80ea 	bcs.w	8000cb8 <__udivmoddi4+0x22c>
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	f240 80e7 	bls.w	8000cb8 <__udivmoddi4+0x22c>
 8000aea:	3902      	subs	r1, #2
 8000aec:	443b      	add	r3, r7
 8000aee:	1a9a      	subs	r2, r3, r2
 8000af0:	b2a3      	uxth	r3, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b02:	459c      	cmp	ip, r3
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0x8e>
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0c:	f080 80d6 	bcs.w	8000cbc <__udivmoddi4+0x230>
 8000b10:	459c      	cmp	ip, r3
 8000b12:	f240 80d3 	bls.w	8000cbc <__udivmoddi4+0x230>
 8000b16:	443b      	add	r3, r7
 8000b18:	3802      	subs	r0, #2
 8000b1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b1e:	eba3 030c 	sub.w	r3, r3, ip
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11d      	cbz	r5, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40f3      	lsrs	r3, r6
 8000b28:	2200      	movs	r2, #0
 8000b2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d905      	bls.n	8000b42 <__udivmoddi4+0xb6>
 8000b36:	b10d      	cbz	r5, 8000b3c <__udivmoddi4+0xb0>
 8000b38:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e7f5      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b42:	fab3 f183 	clz	r1, r3
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d146      	bne.n	8000bd8 <__udivmoddi4+0x14c>
 8000b4a:	4573      	cmp	r3, lr
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xc8>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 8105 	bhi.w	8000d5e <__udivmoddi4+0x2d2>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4690      	mov	r8, r2
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0e5      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b62:	e9c5 4800 	strd	r4, r8, [r5]
 8000b66:	e7e2      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f000 8090 	beq.w	8000c8e <__udivmoddi4+0x202>
 8000b6e:	fab2 f682 	clz	r6, r2
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	f040 80a4 	bne.w	8000cc0 <__udivmoddi4+0x234>
 8000b78:	1a8a      	subs	r2, r1, r2
 8000b7a:	0c03      	lsrs	r3, r0, #16
 8000b7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b80:	b280      	uxth	r0, r0
 8000b82:	b2bc      	uxth	r4, r7
 8000b84:	2101      	movs	r1, #1
 8000b86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b92:	fb04 f20c 	mul.w	r2, r4, ip
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d907      	bls.n	8000baa <__udivmoddi4+0x11e>
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x11c>
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	f200 80e0 	bhi.w	8000d68 <__udivmoddi4+0x2dc>
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bb0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bb4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb8:	fb02 f404 	mul.w	r4, r2, r4
 8000bbc:	429c      	cmp	r4, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x144>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x142>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f200 80ca 	bhi.w	8000d62 <__udivmoddi4+0x2d6>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	1b1b      	subs	r3, r3, r4
 8000bd2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bd6:	e7a5      	b.n	8000b24 <__udivmoddi4+0x98>
 8000bd8:	f1c1 0620 	rsb	r6, r1, #32
 8000bdc:	408b      	lsls	r3, r1
 8000bde:	fa22 f706 	lsr.w	r7, r2, r6
 8000be2:	431f      	orrs	r7, r3
 8000be4:	fa0e f401 	lsl.w	r4, lr, r1
 8000be8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bec:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bf0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	fa1f fc87 	uxth.w	ip, r7
 8000bfe:	fbbe f0f9 	udiv	r0, lr, r9
 8000c02:	0c1c      	lsrs	r4, r3, #16
 8000c04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	d909      	bls.n	8000c2c <__udivmoddi4+0x1a0>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c1e:	f080 809c 	bcs.w	8000d5a <__udivmoddi4+0x2ce>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f240 8099 	bls.w	8000d5a <__udivmoddi4+0x2ce>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	fa1f fe83 	uxth.w	lr, r3
 8000c34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c38:	fb09 4413 	mls	r4, r9, r3, r4
 8000c3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x1ce>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c4e:	f080 8082 	bcs.w	8000d56 <__udivmoddi4+0x2ca>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d97f      	bls.n	8000d56 <__udivmoddi4+0x2ca>
 8000c56:	3b02      	subs	r3, #2
 8000c58:	443c      	add	r4, r7
 8000c5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c66:	4564      	cmp	r4, ip
 8000c68:	4673      	mov	r3, lr
 8000c6a:	46e1      	mov	r9, ip
 8000c6c:	d362      	bcc.n	8000d34 <__udivmoddi4+0x2a8>
 8000c6e:	d05f      	beq.n	8000d30 <__udivmoddi4+0x2a4>
 8000c70:	b15d      	cbz	r5, 8000c8a <__udivmoddi4+0x1fe>
 8000c72:	ebb8 0203 	subs.w	r2, r8, r3
 8000c76:	eb64 0409 	sbc.w	r4, r4, r9
 8000c7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c82:	431e      	orrs	r6, r3
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e74f      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000c8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c92:	0c01      	lsrs	r1, r0, #16
 8000c94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c98:	b280      	uxth	r0, r0
 8000c9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	463c      	mov	r4, r7
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	46be      	mov	lr, r7
 8000ca8:	2620      	movs	r6, #32
 8000caa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cae:	eba2 0208 	sub.w	r2, r2, r8
 8000cb2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cb6:	e766      	b.n	8000b86 <__udivmoddi4+0xfa>
 8000cb8:	4601      	mov	r1, r0
 8000cba:	e718      	b.n	8000aee <__udivmoddi4+0x62>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	e72c      	b.n	8000b1a <__udivmoddi4+0x8e>
 8000cc0:	f1c6 0220 	rsb	r2, r6, #32
 8000cc4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc8:	40b7      	lsls	r7, r6
 8000cca:	40b1      	lsls	r1, r6
 8000ccc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cda:	b2bc      	uxth	r4, r7
 8000cdc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb08 f904 	mul.w	r9, r8, r4
 8000cea:	40b0      	lsls	r0, r6
 8000cec:	4589      	cmp	r9, r1
 8000cee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cf2:	b280      	uxth	r0, r0
 8000cf4:	d93e      	bls.n	8000d74 <__udivmoddi4+0x2e8>
 8000cf6:	1879      	adds	r1, r7, r1
 8000cf8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cfc:	d201      	bcs.n	8000d02 <__udivmoddi4+0x276>
 8000cfe:	4589      	cmp	r9, r1
 8000d00:	d81f      	bhi.n	8000d42 <__udivmoddi4+0x2b6>
 8000d02:	eba1 0109 	sub.w	r1, r1, r9
 8000d06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0a:	fb09 f804 	mul.w	r8, r9, r4
 8000d0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d12:	b292      	uxth	r2, r2
 8000d14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d18:	4542      	cmp	r2, r8
 8000d1a:	d229      	bcs.n	8000d70 <__udivmoddi4+0x2e4>
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d22:	d2c4      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d24:	4542      	cmp	r2, r8
 8000d26:	d2c2      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d28:	f1a9 0102 	sub.w	r1, r9, #2
 8000d2c:	443a      	add	r2, r7
 8000d2e:	e7be      	b.n	8000cae <__udivmoddi4+0x222>
 8000d30:	45f0      	cmp	r8, lr
 8000d32:	d29d      	bcs.n	8000c70 <__udivmoddi4+0x1e4>
 8000d34:	ebbe 0302 	subs.w	r3, lr, r2
 8000d38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	46e1      	mov	r9, ip
 8000d40:	e796      	b.n	8000c70 <__udivmoddi4+0x1e4>
 8000d42:	eba7 0909 	sub.w	r9, r7, r9
 8000d46:	4449      	add	r1, r9
 8000d48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d50:	fb09 f804 	mul.w	r8, r9, r4
 8000d54:	e7db      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d56:	4673      	mov	r3, lr
 8000d58:	e77f      	b.n	8000c5a <__udivmoddi4+0x1ce>
 8000d5a:	4650      	mov	r0, sl
 8000d5c:	e766      	b.n	8000c2c <__udivmoddi4+0x1a0>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e6fd      	b.n	8000b5e <__udivmoddi4+0xd2>
 8000d62:	443b      	add	r3, r7
 8000d64:	3a02      	subs	r2, #2
 8000d66:	e733      	b.n	8000bd0 <__udivmoddi4+0x144>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	443b      	add	r3, r7
 8000d6e:	e71c      	b.n	8000baa <__udivmoddi4+0x11e>
 8000d70:	4649      	mov	r1, r9
 8000d72:	e79c      	b.n	8000cae <__udivmoddi4+0x222>
 8000d74:	eba1 0109 	sub.w	r1, r1, r9
 8000d78:	46c4      	mov	ip, r8
 8000d7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7e:	fb09 f804 	mul.w	r8, r9, r4
 8000d82:	e7c4      	b.n	8000d0e <__udivmoddi4+0x282>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d90:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d94:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d013      	beq.n	8000dc8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000da0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000da4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000da8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d00b      	beq.n	8000dc8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000db0:	e000      	b.n	8000db4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000db2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000db4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f9      	beq.n	8000db2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000dbe:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000dc8:	687b      	ldr	r3, [r7, #4]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ddc:	f000 fbc0 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de0:	f000 f81c 	bl	8000e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de4:	f000 f8f8 	bl	8000fd8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000de8:	f000 f882 	bl	8000ef0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000dec:	2100      	movs	r1, #0
 8000dee:	4808      	ldr	r0, [pc, #32]	@ (8000e10 <main+0x38>)
 8000df0:	f001 fc38 	bl	8002664 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Distanta: %d \n", distance);
 8000df4:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <main+0x3c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4807      	ldr	r0, [pc, #28]	@ (8000e18 <main+0x40>)
 8000dfc:	f002 fc02 	bl	8003604 <iprintf>
	  sendTrig();
 8000e00:	f000 fa02 	bl	8001208 <sendTrig>
	  HAL_Delay(50);
 8000e04:	2032      	movs	r0, #50	@ 0x32
 8000e06:	f000 fc1d 	bl	8001644 <HAL_Delay>
	  printf("Distanta: %d \n", distance);
 8000e0a:	bf00      	nop
 8000e0c:	e7f2      	b.n	8000df4 <main+0x1c>
 8000e0e:	bf00      	nop
 8000e10:	20000084 	.word	0x20000084
 8000e14:	200000dc 	.word	0x200000dc
 8000e18:	080042f4 	.word	0x080042f4

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b094      	sub	sp, #80	@ 0x50
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 0320 	add.w	r3, r7, #32
 8000e26:	2230      	movs	r2, #48	@ 0x30
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f002 fc3f 	bl	80036ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	4b28      	ldr	r3, [pc, #160]	@ (8000ee8 <SystemClock_Config+0xcc>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e48:	4a27      	ldr	r2, [pc, #156]	@ (8000ee8 <SystemClock_Config+0xcc>)
 8000e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e50:	4b25      	ldr	r3, [pc, #148]	@ (8000ee8 <SystemClock_Config+0xcc>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <SystemClock_Config+0xd0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a21      	ldr	r2, [pc, #132]	@ (8000eec <SystemClock_Config+0xd0>)
 8000e66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <SystemClock_Config+0xd0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e80:	2310      	movs	r3, #16
 8000e82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e84:	2302      	movs	r3, #2
 8000e86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000e90:	2332      	movs	r3, #50	@ 0x32
 8000e92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e94:	2304      	movs	r3, #4
 8000e96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fed3 	bl	8001c4c <HAL_RCC_OscConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000eac:	f000 f9dc 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ebc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ec0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 f934 	bl	800213c <HAL_RCC_ClockConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eda:	f000 f9c5 	bl	8001268 <Error_Handler>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3750      	adds	r7, #80	@ 0x50
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40007000 	.word	0x40007000

08000ef0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	f107 0318 	add.w	r3, r7, #24
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd0 <MX_TIM1_Init+0xe0>)
 8000f1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000fd4 <MX_TIM1_Init+0xe4>)
 8000f1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8000f20:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd0 <MX_TIM1_Init+0xe0>)
 8000f22:	2218      	movs	r2, #24
 8000f24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f26:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd0 <MX_TIM1_Init+0xe0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f2c:	4b28      	ldr	r3, [pc, #160]	@ (8000fd0 <MX_TIM1_Init+0xe0>)
 8000f2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f34:	4b26      	ldr	r3, [pc, #152]	@ (8000fd0 <MX_TIM1_Init+0xe0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f3a:	4b25      	ldr	r3, [pc, #148]	@ (8000fd0 <MX_TIM1_Init+0xe0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f40:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <MX_TIM1_Init+0xe0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f46:	4822      	ldr	r0, [pc, #136]	@ (8000fd0 <MX_TIM1_Init+0xe0>)
 8000f48:	f001 fae4 	bl	8002514 <HAL_TIM_Base_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000f52:	f000 f989 	bl	8001268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f5a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f5c:	f107 0318 	add.w	r3, r7, #24
 8000f60:	4619      	mov	r1, r3
 8000f62:	481b      	ldr	r0, [pc, #108]	@ (8000fd0 <MX_TIM1_Init+0xe0>)
 8000f64:	f001 fe32 	bl	8002bcc <HAL_TIM_ConfigClockSource>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000f6e:	f000 f97b 	bl	8001268 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f72:	4817      	ldr	r0, [pc, #92]	@ (8000fd0 <MX_TIM1_Init+0xe0>)
 8000f74:	f001 fb1d 	bl	80025b2 <HAL_TIM_IC_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000f7e:	f000 f973 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480f      	ldr	r0, [pc, #60]	@ (8000fd0 <MX_TIM1_Init+0xe0>)
 8000f92:	f002 f9e5 	bl	8003360 <HAL_TIMEx_MasterConfigSynchronization>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000f9c:	f000 f964 	bl	8001268 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	@ (8000fd0 <MX_TIM1_Init+0xe0>)
 8000fb8:	f001 fd6c 	bl	8002a94 <HAL_TIM_IC_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000fc2:	f000 f951 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	@ 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000084 	.word	0x20000084
 8000fd4:	40010000 	.word	0x40010000

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8001070 <MX_GPIO_Init+0x98>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8001070 <MX_GPIO_Init+0x98>)
 8000ff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <MX_GPIO_Init+0x98>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <MX_GPIO_Init+0x98>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a17      	ldr	r2, [pc, #92]	@ (8001070 <MX_GPIO_Init+0x98>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <MX_GPIO_Init+0x98>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <MX_GPIO_Init+0x98>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a10      	ldr	r2, [pc, #64]	@ (8001070 <MX_GPIO_Init+0x98>)
 8001030:	f043 0310 	orr.w	r3, r3, #16
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <MX_GPIO_Init+0x98>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0310 	and.w	r3, r3, #16
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2108      	movs	r1, #8
 8001046:	480b      	ldr	r0, [pc, #44]	@ (8001074 <MX_GPIO_Init+0x9c>)
 8001048:	f000 fde6 	bl	8001c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800104c:	2308      	movs	r3, #8
 800104e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001058:	2301      	movs	r3, #1
 800105a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	4804      	ldr	r0, [pc, #16]	@ (8001074 <MX_GPIO_Init+0x9c>)
 8001064:	f000 fc24 	bl	80018b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800
 8001074:	40020000 	.word	0x40020000

08001078 <delay>:

/* USER CODE BEGIN 4 */

void delay(uint16_t time){
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <delay+0x30>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < time);
 800108a:	bf00      	nop
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <delay+0x30>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	429a      	cmp	r2, r3
 8001096:	d3f9      	bcc.n	800108c <delay+0x14>
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000084 	.word	0x20000084

080010ac <_write>:

int _write(int file, char *ptr, int len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e009      	b.n	80010d2 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	60ba      	str	r2, [r7, #8]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fe5e 	bl	8000d88 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	3301      	adds	r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	dbf1      	blt.n	80010be <_write+0x12>
  }
  return len;
 80010da:	687b      	ldr	r3, [r7, #4]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	0000      	movs	r0, r0
	...

080010e8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM1){
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a3e      	ldr	r2, [pc, #248]	@ (80011f0 <HAL_TIM_IC_CaptureCallback+0x108>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d171      	bne.n	80011de <HAL_TIM_IC_CaptureCallback+0xf6>

		if(echo_state == 0){
 80010fa:	4b3e      	ldr	r3, [pc, #248]	@ (80011f4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d11a      	bne.n	8001138 <HAL_TIM_IC_CaptureCallback+0x50>
			start_time = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 8001102:	2100      	movs	r1, #0
 8001104:	483c      	ldr	r0, [pc, #240]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001106:	f001 fe29 	bl	8002d5c <HAL_TIM_ReadCapturedValue>
 800110a:	4603      	mov	r3, r0
 800110c:	4a3b      	ldr	r2, [pc, #236]	@ (80011fc <HAL_TIM_IC_CaptureCallback+0x114>)
 800110e:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001110:	4b39      	ldr	r3, [pc, #228]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6a1a      	ldr	r2, [r3, #32]
 8001116:	4b38      	ldr	r3, [pc, #224]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 020a 	bic.w	r2, r2, #10
 800111e:	621a      	str	r2, [r3, #32]
 8001120:	4b35      	ldr	r3, [pc, #212]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6a1a      	ldr	r2, [r3, #32]
 8001126:	4b34      	ldr	r3, [pc, #208]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0202 	orr.w	r2, r2, #2
 800112e:	621a      	str	r2, [r3, #32]
			echo_state = 1;
 8001130:	4b30      	ldr	r3, [pc, #192]	@ (80011f4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}

	}
}
 8001136:	e052      	b.n	80011de <HAL_TIM_IC_CaptureCallback+0xf6>
			stop_time = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 8001138:	2100      	movs	r1, #0
 800113a:	482f      	ldr	r0, [pc, #188]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 800113c:	f001 fe0e 	bl	8002d5c <HAL_TIM_ReadCapturedValue>
 8001140:	4603      	mov	r3, r0
 8001142:	4a2f      	ldr	r2, [pc, #188]	@ (8001200 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001144:	6013      	str	r3, [r2, #0]
			if (stop_time >= start_time)
 8001146:	4b2e      	ldr	r3, [pc, #184]	@ (8001200 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4b2c      	ldr	r3, [pc, #176]	@ (80011fc <HAL_TIM_IC_CaptureCallback+0x114>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d306      	bcc.n	8001160 <HAL_TIM_IC_CaptureCallback+0x78>
				time = stop_time - start_time;
 8001152:	4b2b      	ldr	r3, [pc, #172]	@ (8001200 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4b29      	ldr	r3, [pc, #164]	@ (80011fc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	e00a      	b.n	8001176 <HAL_TIM_IC_CaptureCallback+0x8e>
				time = (htim->Instance->ARR - start_time + stop_time + 1);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001166:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1ad2      	subs	r2, r2, r3
 800116c:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <HAL_TIM_IC_CaptureCallback+0x118>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4413      	add	r3, r2
 8001172:	3301      	adds	r3, #1
 8001174:	60fb      	str	r3, [r7, #12]
			distance = (0.0343 * time) / 2;
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f7ff f9bc 	bl	80004f4 <__aeabi_ui2d>
 800117c:	a31a      	add	r3, pc, #104	@ (adr r3, 80011e8 <HAL_TIM_IC_CaptureCallback+0x100>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff fa31 	bl	80005e8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001196:	f7ff fb51 	bl	800083c <__aeabi_ddiv>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff fc33 	bl	8000a0c <__aeabi_d2iz>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a16      	ldr	r2, [pc, #88]	@ (8001204 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80011aa:	6013      	str	r3, [r2, #0]
			echo_state = 0;
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80011b2:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6a1a      	ldr	r2, [r3, #32]
 80011b8:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 020a 	bic.w	r2, r2, #10
 80011c0:	621a      	str	r2, [r3, #32]
 80011c2:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6a12      	ldr	r2, [r2, #32]
 80011cc:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0202 	bic.w	r2, r2, #2
 80011dc:	60da      	str	r2, [r3, #12]
}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	04816f00 	.word	0x04816f00
 80011ec:	3fa18fc5 	.word	0x3fa18fc5
 80011f0:	40010000 	.word	0x40010000
 80011f4:	200000d0 	.word	0x200000d0
 80011f8:	20000084 	.word	0x20000084
 80011fc:	200000d4 	.word	0x200000d4
 8001200:	200000d8 	.word	0x200000d8
 8001204:	200000dc 	.word	0x200000dc

08001208 <sendTrig>:

void sendTrig(){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2108      	movs	r1, #8
 8001210:	4812      	ldr	r0, [pc, #72]	@ (800125c <sendTrig+0x54>)
 8001212:	f000 fd01 	bl	8001c18 <HAL_GPIO_WritePin>
	state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8001216:	2108      	movs	r1, #8
 8001218:	4810      	ldr	r0, [pc, #64]	@ (800125c <sendTrig+0x54>)
 800121a:	f000 fce5 	bl	8001be8 <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <sendTrig+0x58>)
 8001224:	701a      	strb	r2, [r3, #0]
	delay(10);
 8001226:	200a      	movs	r0, #10
 8001228:	f7ff ff26 	bl	8001078 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2108      	movs	r1, #8
 8001230:	480a      	ldr	r0, [pc, #40]	@ (800125c <sendTrig+0x54>)
 8001232:	f000 fcf1 	bl	8001c18 <HAL_GPIO_WritePin>
	state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8001236:	2108      	movs	r1, #8
 8001238:	4808      	ldr	r0, [pc, #32]	@ (800125c <sendTrig+0x54>)
 800123a:	f000 fcd5 	bl	8001be8 <HAL_GPIO_ReadPin>
 800123e:	4603      	mov	r3, r0
 8001240:	461a      	mov	r2, r3
 8001242:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <sendTrig+0x58>)
 8001244:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <sendTrig+0x5c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <sendTrig+0x5c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 0202 	orr.w	r2, r2, #2
 8001254:	60da      	str	r2, [r3, #12]
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40020000 	.word	0x40020000
 8001260:	200000cc 	.word	0x200000cc
 8001264:	20000084 	.word	0x20000084

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <Error_Handler+0x8>

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <HAL_MspInit+0x4c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001282:	4a0f      	ldr	r2, [pc, #60]	@ (80012c0 <HAL_MspInit+0x4c>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001288:	6453      	str	r3, [r2, #68]	@ 0x44
 800128a:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <HAL_MspInit+0x4c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <HAL_MspInit+0x4c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <HAL_MspInit+0x4c>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_MspInit+0x4c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012b2:	2007      	movs	r0, #7
 80012b4:	f000 faba 	bl	800182c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800

080012c4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	@ 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001358 <HAL_TIM_Base_MspInit+0x94>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d134      	bne.n	8001350 <HAL_TIM_Base_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b1c      	ldr	r3, [pc, #112]	@ (800135c <HAL_TIM_Base_MspInit+0x98>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	4a1b      	ldr	r2, [pc, #108]	@ (800135c <HAL_TIM_Base_MspInit+0x98>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f6:	4b19      	ldr	r3, [pc, #100]	@ (800135c <HAL_TIM_Base_MspInit+0x98>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_TIM_Base_MspInit+0x98>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a14      	ldr	r2, [pc, #80]	@ (800135c <HAL_TIM_Base_MspInit+0x98>)
 800130c:	f043 0310 	orr.w	r3, r3, #16
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_TIM_Base_MspInit+0x98>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800131e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001330:	2301      	movs	r3, #1
 8001332:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	4809      	ldr	r0, [pc, #36]	@ (8001360 <HAL_TIM_Base_MspInit+0x9c>)
 800133c:	f000 fab8 	bl	80018b0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	201b      	movs	r0, #27
 8001346:	f000 fa7c 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800134a:	201b      	movs	r0, #27
 800134c:	f000 fa95 	bl	800187a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	@ 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40010000 	.word	0x40010000
 800135c:	40023800 	.word	0x40023800
 8001360:	40021000 	.word	0x40021000

08001364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <NMI_Handler+0x4>

0800136c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <HardFault_Handler+0x4>

08001374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <MemManage_Handler+0x4>

0800137c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <UsageFault_Handler+0x4>

0800138c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ba:	f000 f923 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013c8:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <TIM1_CC_IRQHandler+0x10>)
 80013ca:	f001 fa73 	bl	80028b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000084 	.word	0x20000084

080013d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	e00a      	b.n	8001400 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ea:	f3af 8000 	nop.w
 80013ee:	4601      	mov	r1, r0
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	60ba      	str	r2, [r7, #8]
 80013f6:	b2ca      	uxtb	r2, r1
 80013f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	429a      	cmp	r2, r3
 8001406:	dbf0      	blt.n	80013ea <_read+0x12>
  }

  return len;
 8001408:	687b      	ldr	r3, [r7, #4]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800143a:	605a      	str	r2, [r3, #4]
  return 0;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_isatty>:

int _isatty(int file)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001484:	4a14      	ldr	r2, [pc, #80]	@ (80014d8 <_sbrk+0x5c>)
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <_sbrk+0x60>)
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001490:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <_sbrk+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <_sbrk+0x64>)
 800149a:	4a12      	ldr	r2, [pc, #72]	@ (80014e4 <_sbrk+0x68>)
 800149c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d207      	bcs.n	80014bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ac:	f002 f94e 	bl	800374c <__errno>
 80014b0:	4603      	mov	r3, r0
 80014b2:	220c      	movs	r2, #12
 80014b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	e009      	b.n	80014d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014bc:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c2:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a05      	ldr	r2, [pc, #20]	@ (80014e0 <_sbrk+0x64>)
 80014cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20020000 	.word	0x20020000
 80014dc:	00000400 	.word	0x00000400
 80014e0:	200000e0 	.word	0x200000e0
 80014e4:	20000238 	.word	0x20000238

080014e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <SystemInit+0x20>)
 80014ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014f2:	4a05      	ldr	r2, [pc, #20]	@ (8001508 <SystemInit+0x20>)
 80014f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 800150c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001544 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001510:	f7ff ffea 	bl	80014e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001514:	480c      	ldr	r0, [pc, #48]	@ (8001548 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001516:	490d      	ldr	r1, [pc, #52]	@ (800154c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001518:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800151c:	e002      	b.n	8001524 <LoopCopyDataInit>

0800151e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001522:	3304      	adds	r3, #4

08001524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001528:	d3f9      	bcc.n	800151e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152a:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800152c:	4c0a      	ldr	r4, [pc, #40]	@ (8001558 <LoopFillZerobss+0x22>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001530:	e001      	b.n	8001536 <LoopFillZerobss>

08001532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001534:	3204      	adds	r2, #4

08001536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001538:	d3fb      	bcc.n	8001532 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153a:	f002 f90d 	bl	8003758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153e:	f7ff fc4b 	bl	8000dd8 <main>
  bx  lr    
 8001542:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8001544:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001550:	08004358 	.word	0x08004358
  ldr r2, =_sbss
 8001554:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001558:	20000234 	.word	0x20000234

0800155c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001564:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <HAL_Init+0x40>)
 800156a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800156e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <HAL_Init+0x40>)
 8001576:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800157a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <HAL_Init+0x40>)
 8001582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 f94f 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	2000      	movs	r0, #0
 8001590:	f000 f808 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff fe6e 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f967 	bl	8001896 <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f000 f92f 	bl	8001842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	@ (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000004 	.word	0x20000004

08001604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <HAL_IncTick+0x20>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_IncTick+0x24>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <HAL_IncTick+0x24>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000008 	.word	0x20000008
 8001628:	200000e4 	.word	0x200000e4

0800162c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b03      	ldr	r3, [pc, #12]	@ (8001640 <HAL_GetTick+0x14>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	200000e4 	.word	0x200000e4

08001644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff ffee 	bl	800162c <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165c:	d005      	beq.n	800166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165e:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <HAL_Delay+0x44>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800166a:	bf00      	nop
 800166c:	f7ff ffde 	bl	800162c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d8f7      	bhi.n	800166c <HAL_Delay+0x28>
  {
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000008 	.word	0x20000008

0800168c <__NVIC_SetPriorityGrouping>:
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	@ (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_EnableIRQ>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db0b      	blt.n	800171a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 021f 	and.w	r2, r3, #31
 8001708:	4907      	ldr	r1, [pc, #28]	@ (8001728 <__NVIC_EnableIRQ+0x38>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	2001      	movs	r0, #1
 8001712:	fa00 f202 	lsl.w	r2, r0, r2
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100

0800172c <__NVIC_SetPriority>:
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	@ (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	@ (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	@ 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	@ 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Config>:
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f7ff ff8e 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff29 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff3e 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ff8e 	bl	8001780 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff5d 	bl	800172c <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff31 	bl	80016f0 <__NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffa2 	bl	80017e8 <SysTick_Config>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	@ 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	e16b      	b.n	8001ba4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f040 815a 	bne.w	8001b9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d005      	beq.n	8001902 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d130      	bne.n	8001964 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001938:	2201      	movs	r2, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 0201 	and.w	r2, r3, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b03      	cmp	r3, #3
 800196e:	d017      	beq.n	80019a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d123      	bne.n	80019f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	08da      	lsrs	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3208      	adds	r2, #8
 80019b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	69b9      	ldr	r1, [r7, #24]
 80019f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0203 	and.w	r2, r3, #3
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80b4 	beq.w	8001b9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b60      	ldr	r3, [pc, #384]	@ (8001bbc <HAL_GPIO_Init+0x30c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	4a5f      	ldr	r2, [pc, #380]	@ (8001bbc <HAL_GPIO_Init+0x30c>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a46:	4b5d      	ldr	r3, [pc, #372]	@ (8001bbc <HAL_GPIO_Init+0x30c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a52:	4a5b      	ldr	r2, [pc, #364]	@ (8001bc0 <HAL_GPIO_Init+0x310>)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a52      	ldr	r2, [pc, #328]	@ (8001bc4 <HAL_GPIO_Init+0x314>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d02b      	beq.n	8001ad6 <HAL_GPIO_Init+0x226>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a51      	ldr	r2, [pc, #324]	@ (8001bc8 <HAL_GPIO_Init+0x318>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d025      	beq.n	8001ad2 <HAL_GPIO_Init+0x222>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a50      	ldr	r2, [pc, #320]	@ (8001bcc <HAL_GPIO_Init+0x31c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d01f      	beq.n	8001ace <HAL_GPIO_Init+0x21e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4f      	ldr	r2, [pc, #316]	@ (8001bd0 <HAL_GPIO_Init+0x320>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d019      	beq.n	8001aca <HAL_GPIO_Init+0x21a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4e      	ldr	r2, [pc, #312]	@ (8001bd4 <HAL_GPIO_Init+0x324>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0x216>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4d      	ldr	r2, [pc, #308]	@ (8001bd8 <HAL_GPIO_Init+0x328>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00d      	beq.n	8001ac2 <HAL_GPIO_Init+0x212>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4c      	ldr	r2, [pc, #304]	@ (8001bdc <HAL_GPIO_Init+0x32c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d007      	beq.n	8001abe <HAL_GPIO_Init+0x20e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4b      	ldr	r2, [pc, #300]	@ (8001be0 <HAL_GPIO_Init+0x330>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_GPIO_Init+0x20a>
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	e00e      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001aba:	2308      	movs	r3, #8
 8001abc:	e00c      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001abe:	2306      	movs	r3, #6
 8001ac0:	e00a      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	e008      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae8:	4935      	ldr	r1, [pc, #212]	@ (8001bc0 <HAL_GPIO_Init+0x310>)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af6:	4b3b      	ldr	r3, [pc, #236]	@ (8001be4 <HAL_GPIO_Init+0x334>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1a:	4a32      	ldr	r2, [pc, #200]	@ (8001be4 <HAL_GPIO_Init+0x334>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b20:	4b30      	ldr	r3, [pc, #192]	@ (8001be4 <HAL_GPIO_Init+0x334>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b44:	4a27      	ldr	r2, [pc, #156]	@ (8001be4 <HAL_GPIO_Init+0x334>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b4a:	4b26      	ldr	r3, [pc, #152]	@ (8001be4 <HAL_GPIO_Init+0x334>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001be4 <HAL_GPIO_Init+0x334>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <HAL_GPIO_Init+0x334>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b98:	4a12      	ldr	r2, [pc, #72]	@ (8001be4 <HAL_GPIO_Init+0x334>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	f67f ae90 	bls.w	80018cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3724      	adds	r7, #36	@ 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40013800 	.word	0x40013800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40021400 	.word	0x40021400
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40021c00 	.word	0x40021c00
 8001be4:	40013c00 	.word	0x40013c00

08001be8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	887b      	ldrh	r3, [r7, #2]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
 8001c04:	e001      	b.n	8001c0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	807b      	strh	r3, [r7, #2]
 8001c24:	4613      	mov	r3, r2
 8001c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c28:	787b      	ldrb	r3, [r7, #1]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2e:	887a      	ldrh	r2, [r7, #2]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c34:	e003      	b.n	8001c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c36:	887b      	ldrh	r3, [r7, #2]
 8001c38:	041a      	lsls	r2, r3, #16
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	619a      	str	r2, [r3, #24]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e267      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d075      	beq.n	8001d56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c6a:	4b88      	ldr	r3, [pc, #544]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d00c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c76:	4b85      	ldr	r3, [pc, #532]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d112      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c82:	4b82      	ldr	r3, [pc, #520]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c8e:	d10b      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	4b7e      	ldr	r3, [pc, #504]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d05b      	beq.n	8001d54 <HAL_RCC_OscConfig+0x108>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d157      	bne.n	8001d54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e242      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb0:	d106      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x74>
 8001cb2:	4b76      	ldr	r3, [pc, #472]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a75      	ldr	r2, [pc, #468]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e01d      	b.n	8001cfc <HAL_RCC_OscConfig+0xb0>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x98>
 8001cca:	4b70      	ldr	r3, [pc, #448]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a6f      	ldr	r2, [pc, #444]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001cd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b6d      	ldr	r3, [pc, #436]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a6c      	ldr	r2, [pc, #432]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0xb0>
 8001ce4:	4b69      	ldr	r3, [pc, #420]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a68      	ldr	r2, [pc, #416]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b66      	ldr	r3, [pc, #408]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a65      	ldr	r2, [pc, #404]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001cf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d013      	beq.n	8001d2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff fc92 	bl	800162c <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff fc8e 	bl	800162c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	@ 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e207      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0xc0>
 8001d2a:	e014      	b.n	8001d56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fc7e 	bl	800162c <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff fc7a 	bl	800162c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	@ 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e1f3      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	4b51      	ldr	r3, [pc, #324]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0xe8>
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d063      	beq.n	8001e2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d62:	4b4a      	ldr	r3, [pc, #296]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00b      	beq.n	8001d86 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6e:	4b47      	ldr	r3, [pc, #284]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d11c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7a:	4b44      	ldr	r3, [pc, #272]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d116      	bne.n	8001db4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d86:	4b41      	ldr	r3, [pc, #260]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <HAL_RCC_OscConfig+0x152>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d001      	beq.n	8001d9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e1c7      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4937      	ldr	r1, [pc, #220]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db2:	e03a      	b.n	8001e2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d020      	beq.n	8001dfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dbc:	4b34      	ldr	r3, [pc, #208]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fc33 	bl	800162c <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dca:	f7ff fc2f 	bl	800162c <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e1a8      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de8:	4b28      	ldr	r3, [pc, #160]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4925      	ldr	r1, [pc, #148]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	600b      	str	r3, [r1, #0]
 8001dfc:	e015      	b.n	8001e2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfe:	4b24      	ldr	r3, [pc, #144]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff fc12 	bl	800162c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fc0e 	bl	800162c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e187      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d036      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d016      	beq.n	8001e6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3e:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <HAL_RCC_OscConfig+0x248>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e44:	f7ff fbf2 	bl	800162c <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fbee 	bl	800162c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e167      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <HAL_RCC_OscConfig+0x240>)
 8001e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x200>
 8001e6a:	e01b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6c:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <HAL_RCC_OscConfig+0x248>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e72:	f7ff fbdb 	bl	800162c <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e78:	e00e      	b.n	8001e98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7a:	f7ff fbd7 	bl	800162c <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d907      	bls.n	8001e98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e150      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	42470000 	.word	0x42470000
 8001e94:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e98:	4b88      	ldr	r3, [pc, #544]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1ea      	bne.n	8001e7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 8097 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb6:	4b81      	ldr	r3, [pc, #516]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10f      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	4b7d      	ldr	r3, [pc, #500]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	4a7c      	ldr	r2, [pc, #496]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed2:	4b7a      	ldr	r3, [pc, #488]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee2:	4b77      	ldr	r3, [pc, #476]	@ (80020c0 <HAL_RCC_OscConfig+0x474>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d118      	bne.n	8001f20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eee:	4b74      	ldr	r3, [pc, #464]	@ (80020c0 <HAL_RCC_OscConfig+0x474>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a73      	ldr	r2, [pc, #460]	@ (80020c0 <HAL_RCC_OscConfig+0x474>)
 8001ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efa:	f7ff fb97 	bl	800162c <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f02:	f7ff fb93 	bl	800162c <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e10c      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f14:	4b6a      	ldr	r3, [pc, #424]	@ (80020c0 <HAL_RCC_OscConfig+0x474>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d106      	bne.n	8001f36 <HAL_RCC_OscConfig+0x2ea>
 8001f28:	4b64      	ldr	r3, [pc, #400]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f2c:	4a63      	ldr	r2, [pc, #396]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f34:	e01c      	b.n	8001f70 <HAL_RCC_OscConfig+0x324>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d10c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x30c>
 8001f3e:	4b5f      	ldr	r3, [pc, #380]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f42:	4a5e      	ldr	r2, [pc, #376]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4e:	4a5b      	ldr	r2, [pc, #364]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f56:	e00b      	b.n	8001f70 <HAL_RCC_OscConfig+0x324>
 8001f58:	4b58      	ldr	r3, [pc, #352]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5c:	4a57      	ldr	r2, [pc, #348]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f64:	4b55      	ldr	r3, [pc, #340]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f68:	4a54      	ldr	r2, [pc, #336]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001f6a:	f023 0304 	bic.w	r3, r3, #4
 8001f6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d015      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f78:	f7ff fb58 	bl	800162c <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f80:	f7ff fb54 	bl	800162c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e0cb      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f96:	4b49      	ldr	r3, [pc, #292]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0ee      	beq.n	8001f80 <HAL_RCC_OscConfig+0x334>
 8001fa2:	e014      	b.n	8001fce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa4:	f7ff fb42 	bl	800162c <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001faa:	e00a      	b.n	8001fc2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fac:	f7ff fb3e 	bl	800162c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e0b5      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1ee      	bne.n	8001fac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fce:	7dfb      	ldrb	r3, [r7, #23]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d105      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd4:	4b39      	ldr	r3, [pc, #228]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	4a38      	ldr	r2, [pc, #224]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001fda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80a1 	beq.w	800212c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fea:	4b34      	ldr	r3, [pc, #208]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d05c      	beq.n	80020b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d141      	bne.n	8002082 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffe:	4b31      	ldr	r3, [pc, #196]	@ (80020c4 <HAL_RCC_OscConfig+0x478>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff fb12 	bl	800162c <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7ff fb0e 	bl	800162c <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e087      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201e:	4b27      	ldr	r3, [pc, #156]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69da      	ldr	r2, [r3, #28]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002038:	019b      	lsls	r3, r3, #6
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002040:	085b      	lsrs	r3, r3, #1
 8002042:	3b01      	subs	r3, #1
 8002044:	041b      	lsls	r3, r3, #16
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204c:	061b      	lsls	r3, r3, #24
 800204e:	491b      	ldr	r1, [pc, #108]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002054:	4b1b      	ldr	r3, [pc, #108]	@ (80020c4 <HAL_RCC_OscConfig+0x478>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205a:	f7ff fae7 	bl	800162c <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002062:	f7ff fae3 	bl	800162c <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e05c      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x416>
 8002080:	e054      	b.n	800212c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002082:	4b10      	ldr	r3, [pc, #64]	@ (80020c4 <HAL_RCC_OscConfig+0x478>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7ff fad0 	bl	800162c <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002090:	f7ff facc 	bl	800162c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e045      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a2:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <HAL_RCC_OscConfig+0x470>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x444>
 80020ae:	e03d      	b.n	800212c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d107      	bne.n	80020c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e038      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40007000 	.word	0x40007000
 80020c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <HAL_RCC_OscConfig+0x4ec>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d028      	beq.n	8002128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d121      	bne.n	8002128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d11a      	bne.n	8002128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020f8:	4013      	ands	r3, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002100:	4293      	cmp	r3, r2
 8002102:	d111      	bne.n	8002128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210e:	085b      	lsrs	r3, r3, #1
 8002110:	3b01      	subs	r3, #1
 8002112:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002114:	429a      	cmp	r2, r3
 8002116:	d107      	bne.n	8002128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002122:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800

0800213c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0cc      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002150:	4b68      	ldr	r3, [pc, #416]	@ (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d90c      	bls.n	8002178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b65      	ldr	r3, [pc, #404]	@ (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b63      	ldr	r3, [pc, #396]	@ (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0b8      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002190:	4b59      	ldr	r3, [pc, #356]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4a58      	ldr	r2, [pc, #352]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800219a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a8:	4b53      	ldr	r3, [pc, #332]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	4a52      	ldr	r2, [pc, #328]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b4:	4b50      	ldr	r3, [pc, #320]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	494d      	ldr	r1, [pc, #308]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d044      	beq.n	800225c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d107      	bne.n	80021ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b47      	ldr	r3, [pc, #284]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d119      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e07f      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d003      	beq.n	80021fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fa:	4b3f      	ldr	r3, [pc, #252]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e06f      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220a:	4b3b      	ldr	r3, [pc, #236]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e067      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221a:	4b37      	ldr	r3, [pc, #220]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4934      	ldr	r1, [pc, #208]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	4313      	orrs	r3, r2
 800222a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800222c:	f7ff f9fe 	bl	800162c <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7ff f9fa 	bl	800162c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e04f      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	4b2b      	ldr	r3, [pc, #172]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 020c 	and.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	429a      	cmp	r2, r3
 800225a:	d1eb      	bne.n	8002234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800225c:	4b25      	ldr	r3, [pc, #148]	@ (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d20c      	bcs.n	8002284 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b22      	ldr	r3, [pc, #136]	@ (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b20      	ldr	r3, [pc, #128]	@ (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e032      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002290:	4b19      	ldr	r3, [pc, #100]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4916      	ldr	r1, [pc, #88]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ae:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	490e      	ldr	r1, [pc, #56]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022c2:	f000 f821 	bl	8002308 <HAL_RCC_GetSysClockFreq>
 80022c6:	4602      	mov	r2, r0
 80022c8:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	490a      	ldr	r1, [pc, #40]	@ (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	5ccb      	ldrb	r3, [r1, r3]
 80022d6:	fa22 f303 	lsr.w	r3, r2, r3
 80022da:	4a09      	ldr	r2, [pc, #36]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022de:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff f95e 	bl	80015a4 <HAL_InitTick>

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023c00 	.word	0x40023c00
 80022f8:	40023800 	.word	0x40023800
 80022fc:	08004304 	.word	0x08004304
 8002300:	20000000 	.word	0x20000000
 8002304:	20000004 	.word	0x20000004

08002308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800230c:	b094      	sub	sp, #80	@ 0x50
 800230e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002320:	4b79      	ldr	r3, [pc, #484]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b08      	cmp	r3, #8
 800232a:	d00d      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0x40>
 800232c:	2b08      	cmp	r3, #8
 800232e:	f200 80e1 	bhi.w	80024f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x34>
 8002336:	2b04      	cmp	r3, #4
 8002338:	d003      	beq.n	8002342 <HAL_RCC_GetSysClockFreq+0x3a>
 800233a:	e0db      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800233c:	4b73      	ldr	r3, [pc, #460]	@ (800250c <HAL_RCC_GetSysClockFreq+0x204>)
 800233e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002340:	e0db      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002342:	4b73      	ldr	r3, [pc, #460]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x208>)
 8002344:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002346:	e0d8      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002348:	4b6f      	ldr	r3, [pc, #444]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002350:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002352:	4b6d      	ldr	r3, [pc, #436]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d063      	beq.n	8002426 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235e:	4b6a      	ldr	r3, [pc, #424]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	099b      	lsrs	r3, r3, #6
 8002364:	2200      	movs	r2, #0
 8002366:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002368:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800236a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800236c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002370:	633b      	str	r3, [r7, #48]	@ 0x30
 8002372:	2300      	movs	r3, #0
 8002374:	637b      	str	r3, [r7, #52]	@ 0x34
 8002376:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800237a:	4622      	mov	r2, r4
 800237c:	462b      	mov	r3, r5
 800237e:	f04f 0000 	mov.w	r0, #0
 8002382:	f04f 0100 	mov.w	r1, #0
 8002386:	0159      	lsls	r1, r3, #5
 8002388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800238c:	0150      	lsls	r0, r2, #5
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4621      	mov	r1, r4
 8002394:	1a51      	subs	r1, r2, r1
 8002396:	6139      	str	r1, [r7, #16]
 8002398:	4629      	mov	r1, r5
 800239a:	eb63 0301 	sbc.w	r3, r3, r1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023ac:	4659      	mov	r1, fp
 80023ae:	018b      	lsls	r3, r1, #6
 80023b0:	4651      	mov	r1, sl
 80023b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023b6:	4651      	mov	r1, sl
 80023b8:	018a      	lsls	r2, r1, #6
 80023ba:	4651      	mov	r1, sl
 80023bc:	ebb2 0801 	subs.w	r8, r2, r1
 80023c0:	4659      	mov	r1, fp
 80023c2:	eb63 0901 	sbc.w	r9, r3, r1
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023da:	4690      	mov	r8, r2
 80023dc:	4699      	mov	r9, r3
 80023de:	4623      	mov	r3, r4
 80023e0:	eb18 0303 	adds.w	r3, r8, r3
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	462b      	mov	r3, r5
 80023e8:	eb49 0303 	adc.w	r3, r9, r3
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023fa:	4629      	mov	r1, r5
 80023fc:	024b      	lsls	r3, r1, #9
 80023fe:	4621      	mov	r1, r4
 8002400:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002404:	4621      	mov	r1, r4
 8002406:	024a      	lsls	r2, r1, #9
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800240e:	2200      	movs	r2, #0
 8002410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002412:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002414:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002418:	f7fe fb20 	bl	8000a5c <__aeabi_uldivmod>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4613      	mov	r3, r2
 8002422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002424:	e058      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002426:	4b38      	ldr	r3, [pc, #224]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	099b      	lsrs	r3, r3, #6
 800242c:	2200      	movs	r2, #0
 800242e:	4618      	mov	r0, r3
 8002430:	4611      	mov	r1, r2
 8002432:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002436:	623b      	str	r3, [r7, #32]
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
 800243c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002440:	4642      	mov	r2, r8
 8002442:	464b      	mov	r3, r9
 8002444:	f04f 0000 	mov.w	r0, #0
 8002448:	f04f 0100 	mov.w	r1, #0
 800244c:	0159      	lsls	r1, r3, #5
 800244e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002452:	0150      	lsls	r0, r2, #5
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4641      	mov	r1, r8
 800245a:	ebb2 0a01 	subs.w	sl, r2, r1
 800245e:	4649      	mov	r1, r9
 8002460:	eb63 0b01 	sbc.w	fp, r3, r1
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002470:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002474:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002478:	ebb2 040a 	subs.w	r4, r2, sl
 800247c:	eb63 050b 	sbc.w	r5, r3, fp
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	00eb      	lsls	r3, r5, #3
 800248a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800248e:	00e2      	lsls	r2, r4, #3
 8002490:	4614      	mov	r4, r2
 8002492:	461d      	mov	r5, r3
 8002494:	4643      	mov	r3, r8
 8002496:	18e3      	adds	r3, r4, r3
 8002498:	603b      	str	r3, [r7, #0]
 800249a:	464b      	mov	r3, r9
 800249c:	eb45 0303 	adc.w	r3, r5, r3
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ae:	4629      	mov	r1, r5
 80024b0:	028b      	lsls	r3, r1, #10
 80024b2:	4621      	mov	r1, r4
 80024b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024b8:	4621      	mov	r1, r4
 80024ba:	028a      	lsls	r2, r1, #10
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024c2:	2200      	movs	r2, #0
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	61fa      	str	r2, [r7, #28]
 80024c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024cc:	f7fe fac6 	bl	8000a5c <__aeabi_uldivmod>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4613      	mov	r3, r2
 80024d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x200>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	3301      	adds	r3, #1
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80024e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024f2:	e002      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024f4:	4b05      	ldr	r3, [pc, #20]	@ (800250c <HAL_RCC_GetSysClockFreq+0x204>)
 80024f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3750      	adds	r7, #80	@ 0x50
 8002500:	46bd      	mov	sp, r7
 8002502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800
 800250c:	00f42400 	.word	0x00f42400
 8002510:	007a1200 	.word	0x007a1200

08002514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e041      	b.n	80025aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe fec2 	bl	80012c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3304      	adds	r3, #4
 8002550:	4619      	mov	r1, r3
 8002552:	4610      	mov	r0, r2
 8002554:	f000 fc6e 	bl	8002e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e041      	b.n	8002648 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f839 	bl	8002650 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3304      	adds	r3, #4
 80025ee:	4619      	mov	r1, r3
 80025f0:	4610      	mov	r0, r2
 80025f2:	f000 fc1f 	bl	8002e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d104      	bne.n	8002682 <HAL_TIM_IC_Start_IT+0x1e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800267e:	b2db      	uxtb	r3, r3
 8002680:	e013      	b.n	80026aa <HAL_TIM_IC_Start_IT+0x46>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b04      	cmp	r3, #4
 8002686:	d104      	bne.n	8002692 <HAL_TIM_IC_Start_IT+0x2e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800268e:	b2db      	uxtb	r3, r3
 8002690:	e00b      	b.n	80026aa <HAL_TIM_IC_Start_IT+0x46>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d104      	bne.n	80026a2 <HAL_TIM_IC_Start_IT+0x3e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	e003      	b.n	80026aa <HAL_TIM_IC_Start_IT+0x46>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d104      	bne.n	80026bc <HAL_TIM_IC_Start_IT+0x58>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	e013      	b.n	80026e4 <HAL_TIM_IC_Start_IT+0x80>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d104      	bne.n	80026cc <HAL_TIM_IC_Start_IT+0x68>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	e00b      	b.n	80026e4 <HAL_TIM_IC_Start_IT+0x80>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d104      	bne.n	80026dc <HAL_TIM_IC_Start_IT+0x78>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	e003      	b.n	80026e4 <HAL_TIM_IC_Start_IT+0x80>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80026e6:	7bbb      	ldrb	r3, [r7, #14]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d102      	bne.n	80026f2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80026ec:	7b7b      	ldrb	r3, [r7, #13]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d001      	beq.n	80026f6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0cc      	b.n	8002890 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d104      	bne.n	8002706 <HAL_TIM_IC_Start_IT+0xa2>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002704:	e013      	b.n	800272e <HAL_TIM_IC_Start_IT+0xca>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b04      	cmp	r3, #4
 800270a:	d104      	bne.n	8002716 <HAL_TIM_IC_Start_IT+0xb2>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002714:	e00b      	b.n	800272e <HAL_TIM_IC_Start_IT+0xca>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b08      	cmp	r3, #8
 800271a:	d104      	bne.n	8002726 <HAL_TIM_IC_Start_IT+0xc2>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002724:	e003      	b.n	800272e <HAL_TIM_IC_Start_IT+0xca>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2202      	movs	r2, #2
 800272a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d104      	bne.n	800273e <HAL_TIM_IC_Start_IT+0xda>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800273c:	e013      	b.n	8002766 <HAL_TIM_IC_Start_IT+0x102>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b04      	cmp	r3, #4
 8002742:	d104      	bne.n	800274e <HAL_TIM_IC_Start_IT+0xea>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800274c:	e00b      	b.n	8002766 <HAL_TIM_IC_Start_IT+0x102>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d104      	bne.n	800275e <HAL_TIM_IC_Start_IT+0xfa>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800275c:	e003      	b.n	8002766 <HAL_TIM_IC_Start_IT+0x102>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2202      	movs	r2, #2
 8002762:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b0c      	cmp	r3, #12
 800276a:	d841      	bhi.n	80027f0 <HAL_TIM_IC_Start_IT+0x18c>
 800276c:	a201      	add	r2, pc, #4	@ (adr r2, 8002774 <HAL_TIM_IC_Start_IT+0x110>)
 800276e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002772:	bf00      	nop
 8002774:	080027a9 	.word	0x080027a9
 8002778:	080027f1 	.word	0x080027f1
 800277c:	080027f1 	.word	0x080027f1
 8002780:	080027f1 	.word	0x080027f1
 8002784:	080027bb 	.word	0x080027bb
 8002788:	080027f1 	.word	0x080027f1
 800278c:	080027f1 	.word	0x080027f1
 8002790:	080027f1 	.word	0x080027f1
 8002794:	080027cd 	.word	0x080027cd
 8002798:	080027f1 	.word	0x080027f1
 800279c:	080027f1 	.word	0x080027f1
 80027a0:	080027f1 	.word	0x080027f1
 80027a4:	080027df 	.word	0x080027df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0202 	orr.w	r2, r2, #2
 80027b6:	60da      	str	r2, [r3, #12]
      break;
 80027b8:	e01d      	b.n	80027f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0204 	orr.w	r2, r2, #4
 80027c8:	60da      	str	r2, [r3, #12]
      break;
 80027ca:	e014      	b.n	80027f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0208 	orr.w	r2, r2, #8
 80027da:	60da      	str	r2, [r3, #12]
      break;
 80027dc:	e00b      	b.n	80027f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0210 	orr.w	r2, r2, #16
 80027ec:	60da      	str	r2, [r3, #12]
      break;
 80027ee:	e002      	b.n	80027f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      break;
 80027f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d148      	bne.n	800288e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2201      	movs	r2, #1
 8002802:	6839      	ldr	r1, [r7, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f000 fd85 	bl	8003314 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a22      	ldr	r2, [pc, #136]	@ (8002898 <HAL_TIM_IC_Start_IT+0x234>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d022      	beq.n	800285a <HAL_TIM_IC_Start_IT+0x1f6>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800281c:	d01d      	beq.n	800285a <HAL_TIM_IC_Start_IT+0x1f6>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1e      	ldr	r2, [pc, #120]	@ (800289c <HAL_TIM_IC_Start_IT+0x238>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d018      	beq.n	800285a <HAL_TIM_IC_Start_IT+0x1f6>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1c      	ldr	r2, [pc, #112]	@ (80028a0 <HAL_TIM_IC_Start_IT+0x23c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d013      	beq.n	800285a <HAL_TIM_IC_Start_IT+0x1f6>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1b      	ldr	r2, [pc, #108]	@ (80028a4 <HAL_TIM_IC_Start_IT+0x240>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00e      	beq.n	800285a <HAL_TIM_IC_Start_IT+0x1f6>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a19      	ldr	r2, [pc, #100]	@ (80028a8 <HAL_TIM_IC_Start_IT+0x244>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d009      	beq.n	800285a <HAL_TIM_IC_Start_IT+0x1f6>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a18      	ldr	r2, [pc, #96]	@ (80028ac <HAL_TIM_IC_Start_IT+0x248>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d004      	beq.n	800285a <HAL_TIM_IC_Start_IT+0x1f6>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a16      	ldr	r2, [pc, #88]	@ (80028b0 <HAL_TIM_IC_Start_IT+0x24c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d111      	bne.n	800287e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b06      	cmp	r3, #6
 800286a:	d010      	beq.n	800288e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287c:	e007      	b.n	800288e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0201 	orr.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40010000 	.word	0x40010000
 800289c:	40000400 	.word	0x40000400
 80028a0:	40000800 	.word	0x40000800
 80028a4:	40000c00 	.word	0x40000c00
 80028a8:	40010400 	.word	0x40010400
 80028ac:	40014000 	.word	0x40014000
 80028b0:	40001800 	.word	0x40001800

080028b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d020      	beq.n	8002918 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01b      	beq.n	8002918 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0202 	mvn.w	r2, #2
 80028e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe fbf2 	bl	80010e8 <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fa76 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 fa7d 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d020      	beq.n	8002964 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01b      	beq.n	8002964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0204 	mvn.w	r2, #4
 8002934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe fbcc 	bl	80010e8 <HAL_TIM_IC_CaptureCallback>
 8002950:	e005      	b.n	800295e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fa50 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fa57 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d020      	beq.n	80029b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01b      	beq.n	80029b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0208 	mvn.w	r2, #8
 8002980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2204      	movs	r2, #4
 8002986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe fba6 	bl	80010e8 <HAL_TIM_IC_CaptureCallback>
 800299c:	e005      	b.n	80029aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fa2a 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fa31 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d020      	beq.n	80029fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01b      	beq.n	80029fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0210 	mvn.w	r2, #16
 80029cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2208      	movs	r2, #8
 80029d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe fb80 	bl	80010e8 <HAL_TIM_IC_CaptureCallback>
 80029e8:	e005      	b.n	80029f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fa04 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fa0b 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00c      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0201 	mvn.w	r2, #1
 8002a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f9e2 	bl	8002de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00c      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fd14 	bl	800346c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00c      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f9dc 	bl	8002e20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00c      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0220 	mvn.w	r2, #32
 8002a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fce6 	bl	8003458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e088      	b.n	8002bc4 <HAL_TIM_IC_ConfigChannel+0x130>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d11b      	bne.n	8002af8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002ad0:	f000 fa5c 	bl	8002f8c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 020c 	bic.w	r2, r2, #12
 8002ae2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6999      	ldr	r1, [r3, #24]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	619a      	str	r2, [r3, #24]
 8002af6:	e060      	b.n	8002bba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d11c      	bne.n	8002b38 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002b0e:	f000 fae0 	bl	80030d2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699a      	ldr	r2, [r3, #24]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002b20:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6999      	ldr	r1, [r3, #24]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	021a      	lsls	r2, r3, #8
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	619a      	str	r2, [r3, #24]
 8002b36:	e040      	b.n	8002bba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d11b      	bne.n	8002b76 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002b4e:	f000 fb2d 	bl	80031ac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69da      	ldr	r2, [r3, #28]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 020c 	bic.w	r2, r2, #12
 8002b60:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69d9      	ldr	r1, [r3, #28]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	61da      	str	r2, [r3, #28]
 8002b74:	e021      	b.n	8002bba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b0c      	cmp	r3, #12
 8002b7a:	d11c      	bne.n	8002bb6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002b8c:	f000 fb4a 	bl	8003224 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69da      	ldr	r2, [r3, #28]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002b9e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	69d9      	ldr	r1, [r3, #28]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	021a      	lsls	r2, r3, #8
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	61da      	str	r2, [r3, #28]
 8002bb4:	e001      	b.n	8002bba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_TIM_ConfigClockSource+0x1c>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e0b4      	b.n	8002d52 <HAL_TIM_ConfigClockSource+0x186>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c20:	d03e      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0xd4>
 8002c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c26:	f200 8087 	bhi.w	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
 8002c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c2e:	f000 8086 	beq.w	8002d3e <HAL_TIM_ConfigClockSource+0x172>
 8002c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c36:	d87f      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
 8002c38:	2b70      	cmp	r3, #112	@ 0x70
 8002c3a:	d01a      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0xa6>
 8002c3c:	2b70      	cmp	r3, #112	@ 0x70
 8002c3e:	d87b      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
 8002c40:	2b60      	cmp	r3, #96	@ 0x60
 8002c42:	d050      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0x11a>
 8002c44:	2b60      	cmp	r3, #96	@ 0x60
 8002c46:	d877      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
 8002c48:	2b50      	cmp	r3, #80	@ 0x50
 8002c4a:	d03c      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0xfa>
 8002c4c:	2b50      	cmp	r3, #80	@ 0x50
 8002c4e:	d873      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
 8002c50:	2b40      	cmp	r3, #64	@ 0x40
 8002c52:	d058      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0x13a>
 8002c54:	2b40      	cmp	r3, #64	@ 0x40
 8002c56:	d86f      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
 8002c58:	2b30      	cmp	r3, #48	@ 0x30
 8002c5a:	d064      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x15a>
 8002c5c:	2b30      	cmp	r3, #48	@ 0x30
 8002c5e:	d86b      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d060      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x15a>
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d867      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d05c      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x15a>
 8002c6c:	2b10      	cmp	r3, #16
 8002c6e:	d05a      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x15a>
 8002c70:	e062      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c82:	f000 fb27 	bl	80032d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	609a      	str	r2, [r3, #8]
      break;
 8002c9e:	e04f      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cb0:	f000 fb10 	bl	80032d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cc2:	609a      	str	r2, [r3, #8]
      break;
 8002cc4:	e03c      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f000 f9ce 	bl	8003074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2150      	movs	r1, #80	@ 0x50
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fadd 	bl	800329e <TIM_ITRx_SetConfig>
      break;
 8002ce4:	e02c      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f000 fa2a 	bl	800314c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2160      	movs	r1, #96	@ 0x60
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 facd 	bl	800329e <TIM_ITRx_SetConfig>
      break;
 8002d04:	e01c      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d12:	461a      	mov	r2, r3
 8002d14:	f000 f9ae 	bl	8003074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2140      	movs	r1, #64	@ 0x40
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fabd 	bl	800329e <TIM_ITRx_SetConfig>
      break;
 8002d24:	e00c      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4610      	mov	r0, r2
 8002d32:	f000 fab4 	bl	800329e <TIM_ITRx_SetConfig>
      break;
 8002d36:	e003      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3c:	e000      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b0c      	cmp	r3, #12
 8002d6e:	d831      	bhi.n	8002dd4 <HAL_TIM_ReadCapturedValue+0x78>
 8002d70:	a201      	add	r2, pc, #4	@ (adr r2, 8002d78 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d76:	bf00      	nop
 8002d78:	08002dad 	.word	0x08002dad
 8002d7c:	08002dd5 	.word	0x08002dd5
 8002d80:	08002dd5 	.word	0x08002dd5
 8002d84:	08002dd5 	.word	0x08002dd5
 8002d88:	08002db7 	.word	0x08002db7
 8002d8c:	08002dd5 	.word	0x08002dd5
 8002d90:	08002dd5 	.word	0x08002dd5
 8002d94:	08002dd5 	.word	0x08002dd5
 8002d98:	08002dc1 	.word	0x08002dc1
 8002d9c:	08002dd5 	.word	0x08002dd5
 8002da0:	08002dd5 	.word	0x08002dd5
 8002da4:	08002dd5 	.word	0x08002dd5
 8002da8:	08002dcb 	.word	0x08002dcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db2:	60fb      	str	r3, [r7, #12]

      break;
 8002db4:	e00f      	b.n	8002dd6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dbc:	60fb      	str	r3, [r7, #12]

      break;
 8002dbe:	e00a      	b.n	8002dd6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc6:	60fb      	str	r3, [r7, #12]

      break;
 8002dc8:	e005      	b.n	8002dd6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	60fb      	str	r3, [r7, #12]

      break;
 8002dd2:	e000      	b.n	8002dd6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002dd4:	bf00      	nop
  }

  return tmpreg;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a46      	ldr	r2, [pc, #280]	@ (8002f60 <TIM_Base_SetConfig+0x12c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d013      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e52:	d00f      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a43      	ldr	r2, [pc, #268]	@ (8002f64 <TIM_Base_SetConfig+0x130>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00b      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a42      	ldr	r2, [pc, #264]	@ (8002f68 <TIM_Base_SetConfig+0x134>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d007      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a41      	ldr	r2, [pc, #260]	@ (8002f6c <TIM_Base_SetConfig+0x138>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a40      	ldr	r2, [pc, #256]	@ (8002f70 <TIM_Base_SetConfig+0x13c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d108      	bne.n	8002e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a35      	ldr	r2, [pc, #212]	@ (8002f60 <TIM_Base_SetConfig+0x12c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d02b      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e94:	d027      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a32      	ldr	r2, [pc, #200]	@ (8002f64 <TIM_Base_SetConfig+0x130>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d023      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a31      	ldr	r2, [pc, #196]	@ (8002f68 <TIM_Base_SetConfig+0x134>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d01f      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a30      	ldr	r2, [pc, #192]	@ (8002f6c <TIM_Base_SetConfig+0x138>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01b      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a2f      	ldr	r2, [pc, #188]	@ (8002f70 <TIM_Base_SetConfig+0x13c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d017      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a2e      	ldr	r2, [pc, #184]	@ (8002f74 <TIM_Base_SetConfig+0x140>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a2d      	ldr	r2, [pc, #180]	@ (8002f78 <TIM_Base_SetConfig+0x144>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00f      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	@ (8002f7c <TIM_Base_SetConfig+0x148>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00b      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8002f80 <TIM_Base_SetConfig+0x14c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a2a      	ldr	r2, [pc, #168]	@ (8002f84 <TIM_Base_SetConfig+0x150>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a29      	ldr	r2, [pc, #164]	@ (8002f88 <TIM_Base_SetConfig+0x154>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d108      	bne.n	8002ef8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a10      	ldr	r2, [pc, #64]	@ (8002f60 <TIM_Base_SetConfig+0x12c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d003      	beq.n	8002f2c <TIM_Base_SetConfig+0xf8>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a12      	ldr	r2, [pc, #72]	@ (8002f70 <TIM_Base_SetConfig+0x13c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d103      	bne.n	8002f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d105      	bne.n	8002f52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f023 0201 	bic.w	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	611a      	str	r2, [r3, #16]
  }
}
 8002f52:	bf00      	nop
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800
 8002f6c:	40000c00 	.word	0x40000c00
 8002f70:	40010400 	.word	0x40010400
 8002f74:	40014000 	.word	0x40014000
 8002f78:	40014400 	.word	0x40014400
 8002f7c:	40014800 	.word	0x40014800
 8002f80:	40001800 	.word	0x40001800
 8002f84:	40001c00 	.word	0x40001c00
 8002f88:	40002000 	.word	0x40002000

08002f8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f023 0201 	bic.w	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4a28      	ldr	r2, [pc, #160]	@ (8003058 <TIM_TI1_SetConfig+0xcc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01b      	beq.n	8002ff2 <TIM_TI1_SetConfig+0x66>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc0:	d017      	beq.n	8002ff2 <TIM_TI1_SetConfig+0x66>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4a25      	ldr	r2, [pc, #148]	@ (800305c <TIM_TI1_SetConfig+0xd0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <TIM_TI1_SetConfig+0x66>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4a24      	ldr	r2, [pc, #144]	@ (8003060 <TIM_TI1_SetConfig+0xd4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00f      	beq.n	8002ff2 <TIM_TI1_SetConfig+0x66>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4a23      	ldr	r2, [pc, #140]	@ (8003064 <TIM_TI1_SetConfig+0xd8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00b      	beq.n	8002ff2 <TIM_TI1_SetConfig+0x66>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4a22      	ldr	r2, [pc, #136]	@ (8003068 <TIM_TI1_SetConfig+0xdc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d007      	beq.n	8002ff2 <TIM_TI1_SetConfig+0x66>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4a21      	ldr	r2, [pc, #132]	@ (800306c <TIM_TI1_SetConfig+0xe0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d003      	beq.n	8002ff2 <TIM_TI1_SetConfig+0x66>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4a20      	ldr	r2, [pc, #128]	@ (8003070 <TIM_TI1_SetConfig+0xe4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d101      	bne.n	8002ff6 <TIM_TI1_SetConfig+0x6a>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <TIM_TI1_SetConfig+0x6c>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	e003      	b.n	8003016 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800301c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	b2db      	uxtb	r3, r3
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f023 030a 	bic.w	r3, r3, #10
 8003030:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f003 030a 	and.w	r3, r3, #10
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	621a      	str	r2, [r3, #32]
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40010000 	.word	0x40010000
 800305c:	40000400 	.word	0x40000400
 8003060:	40000800 	.word	0x40000800
 8003064:	40000c00 	.word	0x40000c00
 8003068:	40010400 	.word	0x40010400
 800306c:	40014000 	.word	0x40014000
 8003070:	40001800 	.word	0x40001800

08003074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f023 0201 	bic.w	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800309e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f023 030a 	bic.w	r3, r3, #10
 80030b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	621a      	str	r2, [r3, #32]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b087      	sub	sp, #28
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f023 0210 	bic.w	r2, r3, #16
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003110:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	031b      	lsls	r3, r3, #12
 8003116:	b29b      	uxth	r3, r3
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003124:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	621a      	str	r2, [r3, #32]
}
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	f023 0210 	bic.w	r2, r3, #16
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	031b      	lsls	r3, r3, #12
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003188:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	621a      	str	r2, [r3, #32]
}
 80031a0:	bf00      	nop
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f023 0303 	bic.w	r3, r3, #3
 80031d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80031fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	621a      	str	r2, [r3, #32]
}
 8003218:	bf00      	nop
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003250:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003262:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	031b      	lsls	r3, r3, #12
 8003268:	b29b      	uxth	r3, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003276:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	031b      	lsls	r3, r3, #12
 800327c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	621a      	str	r2, [r3, #32]
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800329e:	b480      	push	{r7}
 80032a0:	b085      	sub	sp, #20
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f043 0307 	orr.w	r3, r3, #7
 80032c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	609a      	str	r2, [r3, #8]
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	021a      	lsls	r2, r3, #8
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	609a      	str	r2, [r3, #8]
}
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	2201      	movs	r2, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a1a      	ldr	r2, [r3, #32]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	43db      	mvns	r3, r3
 8003336:	401a      	ands	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a1a      	ldr	r2, [r3, #32]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	431a      	orrs	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	621a      	str	r2, [r3, #32]
}
 8003352:	bf00      	nop
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003374:	2302      	movs	r3, #2
 8003376:	e05a      	b.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800339e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a21      	ldr	r2, [pc, #132]	@ (800343c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d022      	beq.n	8003402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033c4:	d01d      	beq.n	8003402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003440 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d018      	beq.n	8003402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003444 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1a      	ldr	r2, [pc, #104]	@ (8003448 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00e      	beq.n	8003402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a18      	ldr	r2, [pc, #96]	@ (800344c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d009      	beq.n	8003402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a17      	ldr	r2, [pc, #92]	@ (8003450 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d004      	beq.n	8003402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a15      	ldr	r2, [pc, #84]	@ (8003454 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d10c      	bne.n	800341c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003408:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	4313      	orrs	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40010000 	.word	0x40010000
 8003440:	40000400 	.word	0x40000400
 8003444:	40000800 	.word	0x40000800
 8003448:	40000c00 	.word	0x40000c00
 800344c:	40010400 	.word	0x40010400
 8003450:	40014000 	.word	0x40014000
 8003454:	40001800 	.word	0x40001800

08003458 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <std>:
 8003480:	2300      	movs	r3, #0
 8003482:	b510      	push	{r4, lr}
 8003484:	4604      	mov	r4, r0
 8003486:	e9c0 3300 	strd	r3, r3, [r0]
 800348a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800348e:	6083      	str	r3, [r0, #8]
 8003490:	8181      	strh	r1, [r0, #12]
 8003492:	6643      	str	r3, [r0, #100]	@ 0x64
 8003494:	81c2      	strh	r2, [r0, #14]
 8003496:	6183      	str	r3, [r0, #24]
 8003498:	4619      	mov	r1, r3
 800349a:	2208      	movs	r2, #8
 800349c:	305c      	adds	r0, #92	@ 0x5c
 800349e:	f000 f906 	bl	80036ae <memset>
 80034a2:	4b0d      	ldr	r3, [pc, #52]	@ (80034d8 <std+0x58>)
 80034a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80034a6:	4b0d      	ldr	r3, [pc, #52]	@ (80034dc <std+0x5c>)
 80034a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80034aa:	4b0d      	ldr	r3, [pc, #52]	@ (80034e0 <std+0x60>)
 80034ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80034ae:	4b0d      	ldr	r3, [pc, #52]	@ (80034e4 <std+0x64>)
 80034b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80034b2:	4b0d      	ldr	r3, [pc, #52]	@ (80034e8 <std+0x68>)
 80034b4:	6224      	str	r4, [r4, #32]
 80034b6:	429c      	cmp	r4, r3
 80034b8:	d006      	beq.n	80034c8 <std+0x48>
 80034ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80034be:	4294      	cmp	r4, r2
 80034c0:	d002      	beq.n	80034c8 <std+0x48>
 80034c2:	33d0      	adds	r3, #208	@ 0xd0
 80034c4:	429c      	cmp	r4, r3
 80034c6:	d105      	bne.n	80034d4 <std+0x54>
 80034c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80034cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034d0:	f000 b966 	b.w	80037a0 <__retarget_lock_init_recursive>
 80034d4:	bd10      	pop	{r4, pc}
 80034d6:	bf00      	nop
 80034d8:	08003629 	.word	0x08003629
 80034dc:	0800364b 	.word	0x0800364b
 80034e0:	08003683 	.word	0x08003683
 80034e4:	080036a7 	.word	0x080036a7
 80034e8:	200000e8 	.word	0x200000e8

080034ec <stdio_exit_handler>:
 80034ec:	4a02      	ldr	r2, [pc, #8]	@ (80034f8 <stdio_exit_handler+0xc>)
 80034ee:	4903      	ldr	r1, [pc, #12]	@ (80034fc <stdio_exit_handler+0x10>)
 80034f0:	4803      	ldr	r0, [pc, #12]	@ (8003500 <stdio_exit_handler+0x14>)
 80034f2:	f000 b869 	b.w	80035c8 <_fwalk_sglue>
 80034f6:	bf00      	nop
 80034f8:	2000000c 	.word	0x2000000c
 80034fc:	0800403d 	.word	0x0800403d
 8003500:	2000001c 	.word	0x2000001c

08003504 <cleanup_stdio>:
 8003504:	6841      	ldr	r1, [r0, #4]
 8003506:	4b0c      	ldr	r3, [pc, #48]	@ (8003538 <cleanup_stdio+0x34>)
 8003508:	4299      	cmp	r1, r3
 800350a:	b510      	push	{r4, lr}
 800350c:	4604      	mov	r4, r0
 800350e:	d001      	beq.n	8003514 <cleanup_stdio+0x10>
 8003510:	f000 fd94 	bl	800403c <_fflush_r>
 8003514:	68a1      	ldr	r1, [r4, #8]
 8003516:	4b09      	ldr	r3, [pc, #36]	@ (800353c <cleanup_stdio+0x38>)
 8003518:	4299      	cmp	r1, r3
 800351a:	d002      	beq.n	8003522 <cleanup_stdio+0x1e>
 800351c:	4620      	mov	r0, r4
 800351e:	f000 fd8d 	bl	800403c <_fflush_r>
 8003522:	68e1      	ldr	r1, [r4, #12]
 8003524:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <cleanup_stdio+0x3c>)
 8003526:	4299      	cmp	r1, r3
 8003528:	d004      	beq.n	8003534 <cleanup_stdio+0x30>
 800352a:	4620      	mov	r0, r4
 800352c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003530:	f000 bd84 	b.w	800403c <_fflush_r>
 8003534:	bd10      	pop	{r4, pc}
 8003536:	bf00      	nop
 8003538:	200000e8 	.word	0x200000e8
 800353c:	20000150 	.word	0x20000150
 8003540:	200001b8 	.word	0x200001b8

08003544 <global_stdio_init.part.0>:
 8003544:	b510      	push	{r4, lr}
 8003546:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <global_stdio_init.part.0+0x30>)
 8003548:	4c0b      	ldr	r4, [pc, #44]	@ (8003578 <global_stdio_init.part.0+0x34>)
 800354a:	4a0c      	ldr	r2, [pc, #48]	@ (800357c <global_stdio_init.part.0+0x38>)
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	4620      	mov	r0, r4
 8003550:	2200      	movs	r2, #0
 8003552:	2104      	movs	r1, #4
 8003554:	f7ff ff94 	bl	8003480 <std>
 8003558:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800355c:	2201      	movs	r2, #1
 800355e:	2109      	movs	r1, #9
 8003560:	f7ff ff8e 	bl	8003480 <std>
 8003564:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003568:	2202      	movs	r2, #2
 800356a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800356e:	2112      	movs	r1, #18
 8003570:	f7ff bf86 	b.w	8003480 <std>
 8003574:	20000220 	.word	0x20000220
 8003578:	200000e8 	.word	0x200000e8
 800357c:	080034ed 	.word	0x080034ed

08003580 <__sfp_lock_acquire>:
 8003580:	4801      	ldr	r0, [pc, #4]	@ (8003588 <__sfp_lock_acquire+0x8>)
 8003582:	f000 b90e 	b.w	80037a2 <__retarget_lock_acquire_recursive>
 8003586:	bf00      	nop
 8003588:	20000229 	.word	0x20000229

0800358c <__sfp_lock_release>:
 800358c:	4801      	ldr	r0, [pc, #4]	@ (8003594 <__sfp_lock_release+0x8>)
 800358e:	f000 b909 	b.w	80037a4 <__retarget_lock_release_recursive>
 8003592:	bf00      	nop
 8003594:	20000229 	.word	0x20000229

08003598 <__sinit>:
 8003598:	b510      	push	{r4, lr}
 800359a:	4604      	mov	r4, r0
 800359c:	f7ff fff0 	bl	8003580 <__sfp_lock_acquire>
 80035a0:	6a23      	ldr	r3, [r4, #32]
 80035a2:	b11b      	cbz	r3, 80035ac <__sinit+0x14>
 80035a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035a8:	f7ff bff0 	b.w	800358c <__sfp_lock_release>
 80035ac:	4b04      	ldr	r3, [pc, #16]	@ (80035c0 <__sinit+0x28>)
 80035ae:	6223      	str	r3, [r4, #32]
 80035b0:	4b04      	ldr	r3, [pc, #16]	@ (80035c4 <__sinit+0x2c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f5      	bne.n	80035a4 <__sinit+0xc>
 80035b8:	f7ff ffc4 	bl	8003544 <global_stdio_init.part.0>
 80035bc:	e7f2      	b.n	80035a4 <__sinit+0xc>
 80035be:	bf00      	nop
 80035c0:	08003505 	.word	0x08003505
 80035c4:	20000220 	.word	0x20000220

080035c8 <_fwalk_sglue>:
 80035c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035cc:	4607      	mov	r7, r0
 80035ce:	4688      	mov	r8, r1
 80035d0:	4614      	mov	r4, r2
 80035d2:	2600      	movs	r6, #0
 80035d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035d8:	f1b9 0901 	subs.w	r9, r9, #1
 80035dc:	d505      	bpl.n	80035ea <_fwalk_sglue+0x22>
 80035de:	6824      	ldr	r4, [r4, #0]
 80035e0:	2c00      	cmp	r4, #0
 80035e2:	d1f7      	bne.n	80035d4 <_fwalk_sglue+0xc>
 80035e4:	4630      	mov	r0, r6
 80035e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ea:	89ab      	ldrh	r3, [r5, #12]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d907      	bls.n	8003600 <_fwalk_sglue+0x38>
 80035f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035f4:	3301      	adds	r3, #1
 80035f6:	d003      	beq.n	8003600 <_fwalk_sglue+0x38>
 80035f8:	4629      	mov	r1, r5
 80035fa:	4638      	mov	r0, r7
 80035fc:	47c0      	blx	r8
 80035fe:	4306      	orrs	r6, r0
 8003600:	3568      	adds	r5, #104	@ 0x68
 8003602:	e7e9      	b.n	80035d8 <_fwalk_sglue+0x10>

08003604 <iprintf>:
 8003604:	b40f      	push	{r0, r1, r2, r3}
 8003606:	b507      	push	{r0, r1, r2, lr}
 8003608:	4906      	ldr	r1, [pc, #24]	@ (8003624 <iprintf+0x20>)
 800360a:	ab04      	add	r3, sp, #16
 800360c:	6808      	ldr	r0, [r1, #0]
 800360e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003612:	6881      	ldr	r1, [r0, #8]
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	f000 f9e9 	bl	80039ec <_vfiprintf_r>
 800361a:	b003      	add	sp, #12
 800361c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003620:	b004      	add	sp, #16
 8003622:	4770      	bx	lr
 8003624:	20000018 	.word	0x20000018

08003628 <__sread>:
 8003628:	b510      	push	{r4, lr}
 800362a:	460c      	mov	r4, r1
 800362c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003630:	f000 f868 	bl	8003704 <_read_r>
 8003634:	2800      	cmp	r0, #0
 8003636:	bfab      	itete	ge
 8003638:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800363a:	89a3      	ldrhlt	r3, [r4, #12]
 800363c:	181b      	addge	r3, r3, r0
 800363e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003642:	bfac      	ite	ge
 8003644:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003646:	81a3      	strhlt	r3, [r4, #12]
 8003648:	bd10      	pop	{r4, pc}

0800364a <__swrite>:
 800364a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800364e:	461f      	mov	r7, r3
 8003650:	898b      	ldrh	r3, [r1, #12]
 8003652:	05db      	lsls	r3, r3, #23
 8003654:	4605      	mov	r5, r0
 8003656:	460c      	mov	r4, r1
 8003658:	4616      	mov	r6, r2
 800365a:	d505      	bpl.n	8003668 <__swrite+0x1e>
 800365c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003660:	2302      	movs	r3, #2
 8003662:	2200      	movs	r2, #0
 8003664:	f000 f83c 	bl	80036e0 <_lseek_r>
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800366e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003672:	81a3      	strh	r3, [r4, #12]
 8003674:	4632      	mov	r2, r6
 8003676:	463b      	mov	r3, r7
 8003678:	4628      	mov	r0, r5
 800367a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800367e:	f000 b853 	b.w	8003728 <_write_r>

08003682 <__sseek>:
 8003682:	b510      	push	{r4, lr}
 8003684:	460c      	mov	r4, r1
 8003686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800368a:	f000 f829 	bl	80036e0 <_lseek_r>
 800368e:	1c43      	adds	r3, r0, #1
 8003690:	89a3      	ldrh	r3, [r4, #12]
 8003692:	bf15      	itete	ne
 8003694:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003696:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800369a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800369e:	81a3      	strheq	r3, [r4, #12]
 80036a0:	bf18      	it	ne
 80036a2:	81a3      	strhne	r3, [r4, #12]
 80036a4:	bd10      	pop	{r4, pc}

080036a6 <__sclose>:
 80036a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036aa:	f000 b809 	b.w	80036c0 <_close_r>

080036ae <memset>:
 80036ae:	4402      	add	r2, r0
 80036b0:	4603      	mov	r3, r0
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d100      	bne.n	80036b8 <memset+0xa>
 80036b6:	4770      	bx	lr
 80036b8:	f803 1b01 	strb.w	r1, [r3], #1
 80036bc:	e7f9      	b.n	80036b2 <memset+0x4>
	...

080036c0 <_close_r>:
 80036c0:	b538      	push	{r3, r4, r5, lr}
 80036c2:	4d06      	ldr	r5, [pc, #24]	@ (80036dc <_close_r+0x1c>)
 80036c4:	2300      	movs	r3, #0
 80036c6:	4604      	mov	r4, r0
 80036c8:	4608      	mov	r0, r1
 80036ca:	602b      	str	r3, [r5, #0]
 80036cc:	f7fd fea1 	bl	8001412 <_close>
 80036d0:	1c43      	adds	r3, r0, #1
 80036d2:	d102      	bne.n	80036da <_close_r+0x1a>
 80036d4:	682b      	ldr	r3, [r5, #0]
 80036d6:	b103      	cbz	r3, 80036da <_close_r+0x1a>
 80036d8:	6023      	str	r3, [r4, #0]
 80036da:	bd38      	pop	{r3, r4, r5, pc}
 80036dc:	20000224 	.word	0x20000224

080036e0 <_lseek_r>:
 80036e0:	b538      	push	{r3, r4, r5, lr}
 80036e2:	4d07      	ldr	r5, [pc, #28]	@ (8003700 <_lseek_r+0x20>)
 80036e4:	4604      	mov	r4, r0
 80036e6:	4608      	mov	r0, r1
 80036e8:	4611      	mov	r1, r2
 80036ea:	2200      	movs	r2, #0
 80036ec:	602a      	str	r2, [r5, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	f7fd feb6 	bl	8001460 <_lseek>
 80036f4:	1c43      	adds	r3, r0, #1
 80036f6:	d102      	bne.n	80036fe <_lseek_r+0x1e>
 80036f8:	682b      	ldr	r3, [r5, #0]
 80036fa:	b103      	cbz	r3, 80036fe <_lseek_r+0x1e>
 80036fc:	6023      	str	r3, [r4, #0]
 80036fe:	bd38      	pop	{r3, r4, r5, pc}
 8003700:	20000224 	.word	0x20000224

08003704 <_read_r>:
 8003704:	b538      	push	{r3, r4, r5, lr}
 8003706:	4d07      	ldr	r5, [pc, #28]	@ (8003724 <_read_r+0x20>)
 8003708:	4604      	mov	r4, r0
 800370a:	4608      	mov	r0, r1
 800370c:	4611      	mov	r1, r2
 800370e:	2200      	movs	r2, #0
 8003710:	602a      	str	r2, [r5, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	f7fd fe60 	bl	80013d8 <_read>
 8003718:	1c43      	adds	r3, r0, #1
 800371a:	d102      	bne.n	8003722 <_read_r+0x1e>
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	b103      	cbz	r3, 8003722 <_read_r+0x1e>
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	bd38      	pop	{r3, r4, r5, pc}
 8003724:	20000224 	.word	0x20000224

08003728 <_write_r>:
 8003728:	b538      	push	{r3, r4, r5, lr}
 800372a:	4d07      	ldr	r5, [pc, #28]	@ (8003748 <_write_r+0x20>)
 800372c:	4604      	mov	r4, r0
 800372e:	4608      	mov	r0, r1
 8003730:	4611      	mov	r1, r2
 8003732:	2200      	movs	r2, #0
 8003734:	602a      	str	r2, [r5, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	f7fd fcb8 	bl	80010ac <_write>
 800373c:	1c43      	adds	r3, r0, #1
 800373e:	d102      	bne.n	8003746 <_write_r+0x1e>
 8003740:	682b      	ldr	r3, [r5, #0]
 8003742:	b103      	cbz	r3, 8003746 <_write_r+0x1e>
 8003744:	6023      	str	r3, [r4, #0]
 8003746:	bd38      	pop	{r3, r4, r5, pc}
 8003748:	20000224 	.word	0x20000224

0800374c <__errno>:
 800374c:	4b01      	ldr	r3, [pc, #4]	@ (8003754 <__errno+0x8>)
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20000018 	.word	0x20000018

08003758 <__libc_init_array>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	4d0d      	ldr	r5, [pc, #52]	@ (8003790 <__libc_init_array+0x38>)
 800375c:	4c0d      	ldr	r4, [pc, #52]	@ (8003794 <__libc_init_array+0x3c>)
 800375e:	1b64      	subs	r4, r4, r5
 8003760:	10a4      	asrs	r4, r4, #2
 8003762:	2600      	movs	r6, #0
 8003764:	42a6      	cmp	r6, r4
 8003766:	d109      	bne.n	800377c <__libc_init_array+0x24>
 8003768:	4d0b      	ldr	r5, [pc, #44]	@ (8003798 <__libc_init_array+0x40>)
 800376a:	4c0c      	ldr	r4, [pc, #48]	@ (800379c <__libc_init_array+0x44>)
 800376c:	f000 fdb6 	bl	80042dc <_init>
 8003770:	1b64      	subs	r4, r4, r5
 8003772:	10a4      	asrs	r4, r4, #2
 8003774:	2600      	movs	r6, #0
 8003776:	42a6      	cmp	r6, r4
 8003778:	d105      	bne.n	8003786 <__libc_init_array+0x2e>
 800377a:	bd70      	pop	{r4, r5, r6, pc}
 800377c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003780:	4798      	blx	r3
 8003782:	3601      	adds	r6, #1
 8003784:	e7ee      	b.n	8003764 <__libc_init_array+0xc>
 8003786:	f855 3b04 	ldr.w	r3, [r5], #4
 800378a:	4798      	blx	r3
 800378c:	3601      	adds	r6, #1
 800378e:	e7f2      	b.n	8003776 <__libc_init_array+0x1e>
 8003790:	08004350 	.word	0x08004350
 8003794:	08004350 	.word	0x08004350
 8003798:	08004350 	.word	0x08004350
 800379c:	08004354 	.word	0x08004354

080037a0 <__retarget_lock_init_recursive>:
 80037a0:	4770      	bx	lr

080037a2 <__retarget_lock_acquire_recursive>:
 80037a2:	4770      	bx	lr

080037a4 <__retarget_lock_release_recursive>:
 80037a4:	4770      	bx	lr
	...

080037a8 <_free_r>:
 80037a8:	b538      	push	{r3, r4, r5, lr}
 80037aa:	4605      	mov	r5, r0
 80037ac:	2900      	cmp	r1, #0
 80037ae:	d041      	beq.n	8003834 <_free_r+0x8c>
 80037b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037b4:	1f0c      	subs	r4, r1, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bfb8      	it	lt
 80037ba:	18e4      	addlt	r4, r4, r3
 80037bc:	f000 f8e0 	bl	8003980 <__malloc_lock>
 80037c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003838 <_free_r+0x90>)
 80037c2:	6813      	ldr	r3, [r2, #0]
 80037c4:	b933      	cbnz	r3, 80037d4 <_free_r+0x2c>
 80037c6:	6063      	str	r3, [r4, #4]
 80037c8:	6014      	str	r4, [r2, #0]
 80037ca:	4628      	mov	r0, r5
 80037cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037d0:	f000 b8dc 	b.w	800398c <__malloc_unlock>
 80037d4:	42a3      	cmp	r3, r4
 80037d6:	d908      	bls.n	80037ea <_free_r+0x42>
 80037d8:	6820      	ldr	r0, [r4, #0]
 80037da:	1821      	adds	r1, r4, r0
 80037dc:	428b      	cmp	r3, r1
 80037de:	bf01      	itttt	eq
 80037e0:	6819      	ldreq	r1, [r3, #0]
 80037e2:	685b      	ldreq	r3, [r3, #4]
 80037e4:	1809      	addeq	r1, r1, r0
 80037e6:	6021      	streq	r1, [r4, #0]
 80037e8:	e7ed      	b.n	80037c6 <_free_r+0x1e>
 80037ea:	461a      	mov	r2, r3
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	b10b      	cbz	r3, 80037f4 <_free_r+0x4c>
 80037f0:	42a3      	cmp	r3, r4
 80037f2:	d9fa      	bls.n	80037ea <_free_r+0x42>
 80037f4:	6811      	ldr	r1, [r2, #0]
 80037f6:	1850      	adds	r0, r2, r1
 80037f8:	42a0      	cmp	r0, r4
 80037fa:	d10b      	bne.n	8003814 <_free_r+0x6c>
 80037fc:	6820      	ldr	r0, [r4, #0]
 80037fe:	4401      	add	r1, r0
 8003800:	1850      	adds	r0, r2, r1
 8003802:	4283      	cmp	r3, r0
 8003804:	6011      	str	r1, [r2, #0]
 8003806:	d1e0      	bne.n	80037ca <_free_r+0x22>
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	6053      	str	r3, [r2, #4]
 800380e:	4408      	add	r0, r1
 8003810:	6010      	str	r0, [r2, #0]
 8003812:	e7da      	b.n	80037ca <_free_r+0x22>
 8003814:	d902      	bls.n	800381c <_free_r+0x74>
 8003816:	230c      	movs	r3, #12
 8003818:	602b      	str	r3, [r5, #0]
 800381a:	e7d6      	b.n	80037ca <_free_r+0x22>
 800381c:	6820      	ldr	r0, [r4, #0]
 800381e:	1821      	adds	r1, r4, r0
 8003820:	428b      	cmp	r3, r1
 8003822:	bf04      	itt	eq
 8003824:	6819      	ldreq	r1, [r3, #0]
 8003826:	685b      	ldreq	r3, [r3, #4]
 8003828:	6063      	str	r3, [r4, #4]
 800382a:	bf04      	itt	eq
 800382c:	1809      	addeq	r1, r1, r0
 800382e:	6021      	streq	r1, [r4, #0]
 8003830:	6054      	str	r4, [r2, #4]
 8003832:	e7ca      	b.n	80037ca <_free_r+0x22>
 8003834:	bd38      	pop	{r3, r4, r5, pc}
 8003836:	bf00      	nop
 8003838:	20000230 	.word	0x20000230

0800383c <sbrk_aligned>:
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	4e0f      	ldr	r6, [pc, #60]	@ (800387c <sbrk_aligned+0x40>)
 8003840:	460c      	mov	r4, r1
 8003842:	6831      	ldr	r1, [r6, #0]
 8003844:	4605      	mov	r5, r0
 8003846:	b911      	cbnz	r1, 800384e <sbrk_aligned+0x12>
 8003848:	f000 fcb4 	bl	80041b4 <_sbrk_r>
 800384c:	6030      	str	r0, [r6, #0]
 800384e:	4621      	mov	r1, r4
 8003850:	4628      	mov	r0, r5
 8003852:	f000 fcaf 	bl	80041b4 <_sbrk_r>
 8003856:	1c43      	adds	r3, r0, #1
 8003858:	d103      	bne.n	8003862 <sbrk_aligned+0x26>
 800385a:	f04f 34ff 	mov.w	r4, #4294967295
 800385e:	4620      	mov	r0, r4
 8003860:	bd70      	pop	{r4, r5, r6, pc}
 8003862:	1cc4      	adds	r4, r0, #3
 8003864:	f024 0403 	bic.w	r4, r4, #3
 8003868:	42a0      	cmp	r0, r4
 800386a:	d0f8      	beq.n	800385e <sbrk_aligned+0x22>
 800386c:	1a21      	subs	r1, r4, r0
 800386e:	4628      	mov	r0, r5
 8003870:	f000 fca0 	bl	80041b4 <_sbrk_r>
 8003874:	3001      	adds	r0, #1
 8003876:	d1f2      	bne.n	800385e <sbrk_aligned+0x22>
 8003878:	e7ef      	b.n	800385a <sbrk_aligned+0x1e>
 800387a:	bf00      	nop
 800387c:	2000022c 	.word	0x2000022c

08003880 <_malloc_r>:
 8003880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003884:	1ccd      	adds	r5, r1, #3
 8003886:	f025 0503 	bic.w	r5, r5, #3
 800388a:	3508      	adds	r5, #8
 800388c:	2d0c      	cmp	r5, #12
 800388e:	bf38      	it	cc
 8003890:	250c      	movcc	r5, #12
 8003892:	2d00      	cmp	r5, #0
 8003894:	4606      	mov	r6, r0
 8003896:	db01      	blt.n	800389c <_malloc_r+0x1c>
 8003898:	42a9      	cmp	r1, r5
 800389a:	d904      	bls.n	80038a6 <_malloc_r+0x26>
 800389c:	230c      	movs	r3, #12
 800389e:	6033      	str	r3, [r6, #0]
 80038a0:	2000      	movs	r0, #0
 80038a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800397c <_malloc_r+0xfc>
 80038aa:	f000 f869 	bl	8003980 <__malloc_lock>
 80038ae:	f8d8 3000 	ldr.w	r3, [r8]
 80038b2:	461c      	mov	r4, r3
 80038b4:	bb44      	cbnz	r4, 8003908 <_malloc_r+0x88>
 80038b6:	4629      	mov	r1, r5
 80038b8:	4630      	mov	r0, r6
 80038ba:	f7ff ffbf 	bl	800383c <sbrk_aligned>
 80038be:	1c43      	adds	r3, r0, #1
 80038c0:	4604      	mov	r4, r0
 80038c2:	d158      	bne.n	8003976 <_malloc_r+0xf6>
 80038c4:	f8d8 4000 	ldr.w	r4, [r8]
 80038c8:	4627      	mov	r7, r4
 80038ca:	2f00      	cmp	r7, #0
 80038cc:	d143      	bne.n	8003956 <_malloc_r+0xd6>
 80038ce:	2c00      	cmp	r4, #0
 80038d0:	d04b      	beq.n	800396a <_malloc_r+0xea>
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	4639      	mov	r1, r7
 80038d6:	4630      	mov	r0, r6
 80038d8:	eb04 0903 	add.w	r9, r4, r3
 80038dc:	f000 fc6a 	bl	80041b4 <_sbrk_r>
 80038e0:	4581      	cmp	r9, r0
 80038e2:	d142      	bne.n	800396a <_malloc_r+0xea>
 80038e4:	6821      	ldr	r1, [r4, #0]
 80038e6:	1a6d      	subs	r5, r5, r1
 80038e8:	4629      	mov	r1, r5
 80038ea:	4630      	mov	r0, r6
 80038ec:	f7ff ffa6 	bl	800383c <sbrk_aligned>
 80038f0:	3001      	adds	r0, #1
 80038f2:	d03a      	beq.n	800396a <_malloc_r+0xea>
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	442b      	add	r3, r5
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	f8d8 3000 	ldr.w	r3, [r8]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	bb62      	cbnz	r2, 800395c <_malloc_r+0xdc>
 8003902:	f8c8 7000 	str.w	r7, [r8]
 8003906:	e00f      	b.n	8003928 <_malloc_r+0xa8>
 8003908:	6822      	ldr	r2, [r4, #0]
 800390a:	1b52      	subs	r2, r2, r5
 800390c:	d420      	bmi.n	8003950 <_malloc_r+0xd0>
 800390e:	2a0b      	cmp	r2, #11
 8003910:	d917      	bls.n	8003942 <_malloc_r+0xc2>
 8003912:	1961      	adds	r1, r4, r5
 8003914:	42a3      	cmp	r3, r4
 8003916:	6025      	str	r5, [r4, #0]
 8003918:	bf18      	it	ne
 800391a:	6059      	strne	r1, [r3, #4]
 800391c:	6863      	ldr	r3, [r4, #4]
 800391e:	bf08      	it	eq
 8003920:	f8c8 1000 	streq.w	r1, [r8]
 8003924:	5162      	str	r2, [r4, r5]
 8003926:	604b      	str	r3, [r1, #4]
 8003928:	4630      	mov	r0, r6
 800392a:	f000 f82f 	bl	800398c <__malloc_unlock>
 800392e:	f104 000b 	add.w	r0, r4, #11
 8003932:	1d23      	adds	r3, r4, #4
 8003934:	f020 0007 	bic.w	r0, r0, #7
 8003938:	1ac2      	subs	r2, r0, r3
 800393a:	bf1c      	itt	ne
 800393c:	1a1b      	subne	r3, r3, r0
 800393e:	50a3      	strne	r3, [r4, r2]
 8003940:	e7af      	b.n	80038a2 <_malloc_r+0x22>
 8003942:	6862      	ldr	r2, [r4, #4]
 8003944:	42a3      	cmp	r3, r4
 8003946:	bf0c      	ite	eq
 8003948:	f8c8 2000 	streq.w	r2, [r8]
 800394c:	605a      	strne	r2, [r3, #4]
 800394e:	e7eb      	b.n	8003928 <_malloc_r+0xa8>
 8003950:	4623      	mov	r3, r4
 8003952:	6864      	ldr	r4, [r4, #4]
 8003954:	e7ae      	b.n	80038b4 <_malloc_r+0x34>
 8003956:	463c      	mov	r4, r7
 8003958:	687f      	ldr	r7, [r7, #4]
 800395a:	e7b6      	b.n	80038ca <_malloc_r+0x4a>
 800395c:	461a      	mov	r2, r3
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	42a3      	cmp	r3, r4
 8003962:	d1fb      	bne.n	800395c <_malloc_r+0xdc>
 8003964:	2300      	movs	r3, #0
 8003966:	6053      	str	r3, [r2, #4]
 8003968:	e7de      	b.n	8003928 <_malloc_r+0xa8>
 800396a:	230c      	movs	r3, #12
 800396c:	6033      	str	r3, [r6, #0]
 800396e:	4630      	mov	r0, r6
 8003970:	f000 f80c 	bl	800398c <__malloc_unlock>
 8003974:	e794      	b.n	80038a0 <_malloc_r+0x20>
 8003976:	6005      	str	r5, [r0, #0]
 8003978:	e7d6      	b.n	8003928 <_malloc_r+0xa8>
 800397a:	bf00      	nop
 800397c:	20000230 	.word	0x20000230

08003980 <__malloc_lock>:
 8003980:	4801      	ldr	r0, [pc, #4]	@ (8003988 <__malloc_lock+0x8>)
 8003982:	f7ff bf0e 	b.w	80037a2 <__retarget_lock_acquire_recursive>
 8003986:	bf00      	nop
 8003988:	20000228 	.word	0x20000228

0800398c <__malloc_unlock>:
 800398c:	4801      	ldr	r0, [pc, #4]	@ (8003994 <__malloc_unlock+0x8>)
 800398e:	f7ff bf09 	b.w	80037a4 <__retarget_lock_release_recursive>
 8003992:	bf00      	nop
 8003994:	20000228 	.word	0x20000228

08003998 <__sfputc_r>:
 8003998:	6893      	ldr	r3, [r2, #8]
 800399a:	3b01      	subs	r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	b410      	push	{r4}
 80039a0:	6093      	str	r3, [r2, #8]
 80039a2:	da08      	bge.n	80039b6 <__sfputc_r+0x1e>
 80039a4:	6994      	ldr	r4, [r2, #24]
 80039a6:	42a3      	cmp	r3, r4
 80039a8:	db01      	blt.n	80039ae <__sfputc_r+0x16>
 80039aa:	290a      	cmp	r1, #10
 80039ac:	d103      	bne.n	80039b6 <__sfputc_r+0x1e>
 80039ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039b2:	f000 bb6b 	b.w	800408c <__swbuf_r>
 80039b6:	6813      	ldr	r3, [r2, #0]
 80039b8:	1c58      	adds	r0, r3, #1
 80039ba:	6010      	str	r0, [r2, #0]
 80039bc:	7019      	strb	r1, [r3, #0]
 80039be:	4608      	mov	r0, r1
 80039c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <__sfputs_r>:
 80039c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c8:	4606      	mov	r6, r0
 80039ca:	460f      	mov	r7, r1
 80039cc:	4614      	mov	r4, r2
 80039ce:	18d5      	adds	r5, r2, r3
 80039d0:	42ac      	cmp	r4, r5
 80039d2:	d101      	bne.n	80039d8 <__sfputs_r+0x12>
 80039d4:	2000      	movs	r0, #0
 80039d6:	e007      	b.n	80039e8 <__sfputs_r+0x22>
 80039d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039dc:	463a      	mov	r2, r7
 80039de:	4630      	mov	r0, r6
 80039e0:	f7ff ffda 	bl	8003998 <__sfputc_r>
 80039e4:	1c43      	adds	r3, r0, #1
 80039e6:	d1f3      	bne.n	80039d0 <__sfputs_r+0xa>
 80039e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039ec <_vfiprintf_r>:
 80039ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f0:	460d      	mov	r5, r1
 80039f2:	b09d      	sub	sp, #116	@ 0x74
 80039f4:	4614      	mov	r4, r2
 80039f6:	4698      	mov	r8, r3
 80039f8:	4606      	mov	r6, r0
 80039fa:	b118      	cbz	r0, 8003a04 <_vfiprintf_r+0x18>
 80039fc:	6a03      	ldr	r3, [r0, #32]
 80039fe:	b90b      	cbnz	r3, 8003a04 <_vfiprintf_r+0x18>
 8003a00:	f7ff fdca 	bl	8003598 <__sinit>
 8003a04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a06:	07d9      	lsls	r1, r3, #31
 8003a08:	d405      	bmi.n	8003a16 <_vfiprintf_r+0x2a>
 8003a0a:	89ab      	ldrh	r3, [r5, #12]
 8003a0c:	059a      	lsls	r2, r3, #22
 8003a0e:	d402      	bmi.n	8003a16 <_vfiprintf_r+0x2a>
 8003a10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a12:	f7ff fec6 	bl	80037a2 <__retarget_lock_acquire_recursive>
 8003a16:	89ab      	ldrh	r3, [r5, #12]
 8003a18:	071b      	lsls	r3, r3, #28
 8003a1a:	d501      	bpl.n	8003a20 <_vfiprintf_r+0x34>
 8003a1c:	692b      	ldr	r3, [r5, #16]
 8003a1e:	b99b      	cbnz	r3, 8003a48 <_vfiprintf_r+0x5c>
 8003a20:	4629      	mov	r1, r5
 8003a22:	4630      	mov	r0, r6
 8003a24:	f000 fb70 	bl	8004108 <__swsetup_r>
 8003a28:	b170      	cbz	r0, 8003a48 <_vfiprintf_r+0x5c>
 8003a2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a2c:	07dc      	lsls	r4, r3, #31
 8003a2e:	d504      	bpl.n	8003a3a <_vfiprintf_r+0x4e>
 8003a30:	f04f 30ff 	mov.w	r0, #4294967295
 8003a34:	b01d      	add	sp, #116	@ 0x74
 8003a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a3a:	89ab      	ldrh	r3, [r5, #12]
 8003a3c:	0598      	lsls	r0, r3, #22
 8003a3e:	d4f7      	bmi.n	8003a30 <_vfiprintf_r+0x44>
 8003a40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a42:	f7ff feaf 	bl	80037a4 <__retarget_lock_release_recursive>
 8003a46:	e7f3      	b.n	8003a30 <_vfiprintf_r+0x44>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a4c:	2320      	movs	r3, #32
 8003a4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a56:	2330      	movs	r3, #48	@ 0x30
 8003a58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003c08 <_vfiprintf_r+0x21c>
 8003a5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a60:	f04f 0901 	mov.w	r9, #1
 8003a64:	4623      	mov	r3, r4
 8003a66:	469a      	mov	sl, r3
 8003a68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a6c:	b10a      	cbz	r2, 8003a72 <_vfiprintf_r+0x86>
 8003a6e:	2a25      	cmp	r2, #37	@ 0x25
 8003a70:	d1f9      	bne.n	8003a66 <_vfiprintf_r+0x7a>
 8003a72:	ebba 0b04 	subs.w	fp, sl, r4
 8003a76:	d00b      	beq.n	8003a90 <_vfiprintf_r+0xa4>
 8003a78:	465b      	mov	r3, fp
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	4630      	mov	r0, r6
 8003a80:	f7ff ffa1 	bl	80039c6 <__sfputs_r>
 8003a84:	3001      	adds	r0, #1
 8003a86:	f000 80a7 	beq.w	8003bd8 <_vfiprintf_r+0x1ec>
 8003a8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a8c:	445a      	add	r2, fp
 8003a8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a90:	f89a 3000 	ldrb.w	r3, [sl]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 809f 	beq.w	8003bd8 <_vfiprintf_r+0x1ec>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aa4:	f10a 0a01 	add.w	sl, sl, #1
 8003aa8:	9304      	str	r3, [sp, #16]
 8003aaa:	9307      	str	r3, [sp, #28]
 8003aac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ab0:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ab2:	4654      	mov	r4, sl
 8003ab4:	2205      	movs	r2, #5
 8003ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aba:	4853      	ldr	r0, [pc, #332]	@ (8003c08 <_vfiprintf_r+0x21c>)
 8003abc:	f7fc fb88 	bl	80001d0 <memchr>
 8003ac0:	9a04      	ldr	r2, [sp, #16]
 8003ac2:	b9d8      	cbnz	r0, 8003afc <_vfiprintf_r+0x110>
 8003ac4:	06d1      	lsls	r1, r2, #27
 8003ac6:	bf44      	itt	mi
 8003ac8:	2320      	movmi	r3, #32
 8003aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ace:	0713      	lsls	r3, r2, #28
 8003ad0:	bf44      	itt	mi
 8003ad2:	232b      	movmi	r3, #43	@ 0x2b
 8003ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8003adc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ade:	d015      	beq.n	8003b0c <_vfiprintf_r+0x120>
 8003ae0:	9a07      	ldr	r2, [sp, #28]
 8003ae2:	4654      	mov	r4, sl
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f04f 0c0a 	mov.w	ip, #10
 8003aea:	4621      	mov	r1, r4
 8003aec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003af0:	3b30      	subs	r3, #48	@ 0x30
 8003af2:	2b09      	cmp	r3, #9
 8003af4:	d94b      	bls.n	8003b8e <_vfiprintf_r+0x1a2>
 8003af6:	b1b0      	cbz	r0, 8003b26 <_vfiprintf_r+0x13a>
 8003af8:	9207      	str	r2, [sp, #28]
 8003afa:	e014      	b.n	8003b26 <_vfiprintf_r+0x13a>
 8003afc:	eba0 0308 	sub.w	r3, r0, r8
 8003b00:	fa09 f303 	lsl.w	r3, r9, r3
 8003b04:	4313      	orrs	r3, r2
 8003b06:	9304      	str	r3, [sp, #16]
 8003b08:	46a2      	mov	sl, r4
 8003b0a:	e7d2      	b.n	8003ab2 <_vfiprintf_r+0xc6>
 8003b0c:	9b03      	ldr	r3, [sp, #12]
 8003b0e:	1d19      	adds	r1, r3, #4
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	9103      	str	r1, [sp, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bfbb      	ittet	lt
 8003b18:	425b      	neglt	r3, r3
 8003b1a:	f042 0202 	orrlt.w	r2, r2, #2
 8003b1e:	9307      	strge	r3, [sp, #28]
 8003b20:	9307      	strlt	r3, [sp, #28]
 8003b22:	bfb8      	it	lt
 8003b24:	9204      	strlt	r2, [sp, #16]
 8003b26:	7823      	ldrb	r3, [r4, #0]
 8003b28:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b2a:	d10a      	bne.n	8003b42 <_vfiprintf_r+0x156>
 8003b2c:	7863      	ldrb	r3, [r4, #1]
 8003b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b30:	d132      	bne.n	8003b98 <_vfiprintf_r+0x1ac>
 8003b32:	9b03      	ldr	r3, [sp, #12]
 8003b34:	1d1a      	adds	r2, r3, #4
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	9203      	str	r2, [sp, #12]
 8003b3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b3e:	3402      	adds	r4, #2
 8003b40:	9305      	str	r3, [sp, #20]
 8003b42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003c18 <_vfiprintf_r+0x22c>
 8003b46:	7821      	ldrb	r1, [r4, #0]
 8003b48:	2203      	movs	r2, #3
 8003b4a:	4650      	mov	r0, sl
 8003b4c:	f7fc fb40 	bl	80001d0 <memchr>
 8003b50:	b138      	cbz	r0, 8003b62 <_vfiprintf_r+0x176>
 8003b52:	9b04      	ldr	r3, [sp, #16]
 8003b54:	eba0 000a 	sub.w	r0, r0, sl
 8003b58:	2240      	movs	r2, #64	@ 0x40
 8003b5a:	4082      	lsls	r2, r0
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	3401      	adds	r4, #1
 8003b60:	9304      	str	r3, [sp, #16]
 8003b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b66:	4829      	ldr	r0, [pc, #164]	@ (8003c0c <_vfiprintf_r+0x220>)
 8003b68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b6c:	2206      	movs	r2, #6
 8003b6e:	f7fc fb2f 	bl	80001d0 <memchr>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d03f      	beq.n	8003bf6 <_vfiprintf_r+0x20a>
 8003b76:	4b26      	ldr	r3, [pc, #152]	@ (8003c10 <_vfiprintf_r+0x224>)
 8003b78:	bb1b      	cbnz	r3, 8003bc2 <_vfiprintf_r+0x1d6>
 8003b7a:	9b03      	ldr	r3, [sp, #12]
 8003b7c:	3307      	adds	r3, #7
 8003b7e:	f023 0307 	bic.w	r3, r3, #7
 8003b82:	3308      	adds	r3, #8
 8003b84:	9303      	str	r3, [sp, #12]
 8003b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b88:	443b      	add	r3, r7
 8003b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b8c:	e76a      	b.n	8003a64 <_vfiprintf_r+0x78>
 8003b8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b92:	460c      	mov	r4, r1
 8003b94:	2001      	movs	r0, #1
 8003b96:	e7a8      	b.n	8003aea <_vfiprintf_r+0xfe>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	3401      	adds	r4, #1
 8003b9c:	9305      	str	r3, [sp, #20]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	f04f 0c0a 	mov.w	ip, #10
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003baa:	3a30      	subs	r2, #48	@ 0x30
 8003bac:	2a09      	cmp	r2, #9
 8003bae:	d903      	bls.n	8003bb8 <_vfiprintf_r+0x1cc>
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0c6      	beq.n	8003b42 <_vfiprintf_r+0x156>
 8003bb4:	9105      	str	r1, [sp, #20]
 8003bb6:	e7c4      	b.n	8003b42 <_vfiprintf_r+0x156>
 8003bb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bbc:	4604      	mov	r4, r0
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e7f0      	b.n	8003ba4 <_vfiprintf_r+0x1b8>
 8003bc2:	ab03      	add	r3, sp, #12
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	462a      	mov	r2, r5
 8003bc8:	4b12      	ldr	r3, [pc, #72]	@ (8003c14 <_vfiprintf_r+0x228>)
 8003bca:	a904      	add	r1, sp, #16
 8003bcc:	4630      	mov	r0, r6
 8003bce:	f3af 8000 	nop.w
 8003bd2:	4607      	mov	r7, r0
 8003bd4:	1c78      	adds	r0, r7, #1
 8003bd6:	d1d6      	bne.n	8003b86 <_vfiprintf_r+0x19a>
 8003bd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bda:	07d9      	lsls	r1, r3, #31
 8003bdc:	d405      	bmi.n	8003bea <_vfiprintf_r+0x1fe>
 8003bde:	89ab      	ldrh	r3, [r5, #12]
 8003be0:	059a      	lsls	r2, r3, #22
 8003be2:	d402      	bmi.n	8003bea <_vfiprintf_r+0x1fe>
 8003be4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003be6:	f7ff fddd 	bl	80037a4 <__retarget_lock_release_recursive>
 8003bea:	89ab      	ldrh	r3, [r5, #12]
 8003bec:	065b      	lsls	r3, r3, #25
 8003bee:	f53f af1f 	bmi.w	8003a30 <_vfiprintf_r+0x44>
 8003bf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003bf4:	e71e      	b.n	8003a34 <_vfiprintf_r+0x48>
 8003bf6:	ab03      	add	r3, sp, #12
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	462a      	mov	r2, r5
 8003bfc:	4b05      	ldr	r3, [pc, #20]	@ (8003c14 <_vfiprintf_r+0x228>)
 8003bfe:	a904      	add	r1, sp, #16
 8003c00:	4630      	mov	r0, r6
 8003c02:	f000 f879 	bl	8003cf8 <_printf_i>
 8003c06:	e7e4      	b.n	8003bd2 <_vfiprintf_r+0x1e6>
 8003c08:	08004314 	.word	0x08004314
 8003c0c:	0800431e 	.word	0x0800431e
 8003c10:	00000000 	.word	0x00000000
 8003c14:	080039c7 	.word	0x080039c7
 8003c18:	0800431a 	.word	0x0800431a

08003c1c <_printf_common>:
 8003c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c20:	4616      	mov	r6, r2
 8003c22:	4698      	mov	r8, r3
 8003c24:	688a      	ldr	r2, [r1, #8]
 8003c26:	690b      	ldr	r3, [r1, #16]
 8003c28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	bfb8      	it	lt
 8003c30:	4613      	movlt	r3, r2
 8003c32:	6033      	str	r3, [r6, #0]
 8003c34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c38:	4607      	mov	r7, r0
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	b10a      	cbz	r2, 8003c42 <_printf_common+0x26>
 8003c3e:	3301      	adds	r3, #1
 8003c40:	6033      	str	r3, [r6, #0]
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	0699      	lsls	r1, r3, #26
 8003c46:	bf42      	ittt	mi
 8003c48:	6833      	ldrmi	r3, [r6, #0]
 8003c4a:	3302      	addmi	r3, #2
 8003c4c:	6033      	strmi	r3, [r6, #0]
 8003c4e:	6825      	ldr	r5, [r4, #0]
 8003c50:	f015 0506 	ands.w	r5, r5, #6
 8003c54:	d106      	bne.n	8003c64 <_printf_common+0x48>
 8003c56:	f104 0a19 	add.w	sl, r4, #25
 8003c5a:	68e3      	ldr	r3, [r4, #12]
 8003c5c:	6832      	ldr	r2, [r6, #0]
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	42ab      	cmp	r3, r5
 8003c62:	dc26      	bgt.n	8003cb2 <_printf_common+0x96>
 8003c64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c68:	6822      	ldr	r2, [r4, #0]
 8003c6a:	3b00      	subs	r3, #0
 8003c6c:	bf18      	it	ne
 8003c6e:	2301      	movne	r3, #1
 8003c70:	0692      	lsls	r2, r2, #26
 8003c72:	d42b      	bmi.n	8003ccc <_printf_common+0xb0>
 8003c74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c78:	4641      	mov	r1, r8
 8003c7a:	4638      	mov	r0, r7
 8003c7c:	47c8      	blx	r9
 8003c7e:	3001      	adds	r0, #1
 8003c80:	d01e      	beq.n	8003cc0 <_printf_common+0xa4>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	6922      	ldr	r2, [r4, #16]
 8003c86:	f003 0306 	and.w	r3, r3, #6
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	bf02      	ittt	eq
 8003c8e:	68e5      	ldreq	r5, [r4, #12]
 8003c90:	6833      	ldreq	r3, [r6, #0]
 8003c92:	1aed      	subeq	r5, r5, r3
 8003c94:	68a3      	ldr	r3, [r4, #8]
 8003c96:	bf0c      	ite	eq
 8003c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c9c:	2500      	movne	r5, #0
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	bfc4      	itt	gt
 8003ca2:	1a9b      	subgt	r3, r3, r2
 8003ca4:	18ed      	addgt	r5, r5, r3
 8003ca6:	2600      	movs	r6, #0
 8003ca8:	341a      	adds	r4, #26
 8003caa:	42b5      	cmp	r5, r6
 8003cac:	d11a      	bne.n	8003ce4 <_printf_common+0xc8>
 8003cae:	2000      	movs	r0, #0
 8003cb0:	e008      	b.n	8003cc4 <_printf_common+0xa8>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	4652      	mov	r2, sl
 8003cb6:	4641      	mov	r1, r8
 8003cb8:	4638      	mov	r0, r7
 8003cba:	47c8      	blx	r9
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d103      	bne.n	8003cc8 <_printf_common+0xac>
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc8:	3501      	adds	r5, #1
 8003cca:	e7c6      	b.n	8003c5a <_printf_common+0x3e>
 8003ccc:	18e1      	adds	r1, r4, r3
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	2030      	movs	r0, #48	@ 0x30
 8003cd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cd6:	4422      	add	r2, r4
 8003cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003cdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	e7c7      	b.n	8003c74 <_printf_common+0x58>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	4641      	mov	r1, r8
 8003cea:	4638      	mov	r0, r7
 8003cec:	47c8      	blx	r9
 8003cee:	3001      	adds	r0, #1
 8003cf0:	d0e6      	beq.n	8003cc0 <_printf_common+0xa4>
 8003cf2:	3601      	adds	r6, #1
 8003cf4:	e7d9      	b.n	8003caa <_printf_common+0x8e>
	...

08003cf8 <_printf_i>:
 8003cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cfc:	7e0f      	ldrb	r7, [r1, #24]
 8003cfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d00:	2f78      	cmp	r7, #120	@ 0x78
 8003d02:	4691      	mov	r9, r2
 8003d04:	4680      	mov	r8, r0
 8003d06:	460c      	mov	r4, r1
 8003d08:	469a      	mov	sl, r3
 8003d0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d0e:	d807      	bhi.n	8003d20 <_printf_i+0x28>
 8003d10:	2f62      	cmp	r7, #98	@ 0x62
 8003d12:	d80a      	bhi.n	8003d2a <_printf_i+0x32>
 8003d14:	2f00      	cmp	r7, #0
 8003d16:	f000 80d1 	beq.w	8003ebc <_printf_i+0x1c4>
 8003d1a:	2f58      	cmp	r7, #88	@ 0x58
 8003d1c:	f000 80b8 	beq.w	8003e90 <_printf_i+0x198>
 8003d20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d28:	e03a      	b.n	8003da0 <_printf_i+0xa8>
 8003d2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d2e:	2b15      	cmp	r3, #21
 8003d30:	d8f6      	bhi.n	8003d20 <_printf_i+0x28>
 8003d32:	a101      	add	r1, pc, #4	@ (adr r1, 8003d38 <_printf_i+0x40>)
 8003d34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d38:	08003d91 	.word	0x08003d91
 8003d3c:	08003da5 	.word	0x08003da5
 8003d40:	08003d21 	.word	0x08003d21
 8003d44:	08003d21 	.word	0x08003d21
 8003d48:	08003d21 	.word	0x08003d21
 8003d4c:	08003d21 	.word	0x08003d21
 8003d50:	08003da5 	.word	0x08003da5
 8003d54:	08003d21 	.word	0x08003d21
 8003d58:	08003d21 	.word	0x08003d21
 8003d5c:	08003d21 	.word	0x08003d21
 8003d60:	08003d21 	.word	0x08003d21
 8003d64:	08003ea3 	.word	0x08003ea3
 8003d68:	08003dcf 	.word	0x08003dcf
 8003d6c:	08003e5d 	.word	0x08003e5d
 8003d70:	08003d21 	.word	0x08003d21
 8003d74:	08003d21 	.word	0x08003d21
 8003d78:	08003ec5 	.word	0x08003ec5
 8003d7c:	08003d21 	.word	0x08003d21
 8003d80:	08003dcf 	.word	0x08003dcf
 8003d84:	08003d21 	.word	0x08003d21
 8003d88:	08003d21 	.word	0x08003d21
 8003d8c:	08003e65 	.word	0x08003e65
 8003d90:	6833      	ldr	r3, [r6, #0]
 8003d92:	1d1a      	adds	r2, r3, #4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6032      	str	r2, [r6, #0]
 8003d98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003da0:	2301      	movs	r3, #1
 8003da2:	e09c      	b.n	8003ede <_printf_i+0x1e6>
 8003da4:	6833      	ldr	r3, [r6, #0]
 8003da6:	6820      	ldr	r0, [r4, #0]
 8003da8:	1d19      	adds	r1, r3, #4
 8003daa:	6031      	str	r1, [r6, #0]
 8003dac:	0606      	lsls	r6, r0, #24
 8003dae:	d501      	bpl.n	8003db4 <_printf_i+0xbc>
 8003db0:	681d      	ldr	r5, [r3, #0]
 8003db2:	e003      	b.n	8003dbc <_printf_i+0xc4>
 8003db4:	0645      	lsls	r5, r0, #25
 8003db6:	d5fb      	bpl.n	8003db0 <_printf_i+0xb8>
 8003db8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	da03      	bge.n	8003dc8 <_printf_i+0xd0>
 8003dc0:	232d      	movs	r3, #45	@ 0x2d
 8003dc2:	426d      	negs	r5, r5
 8003dc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dc8:	4858      	ldr	r0, [pc, #352]	@ (8003f2c <_printf_i+0x234>)
 8003dca:	230a      	movs	r3, #10
 8003dcc:	e011      	b.n	8003df2 <_printf_i+0xfa>
 8003dce:	6821      	ldr	r1, [r4, #0]
 8003dd0:	6833      	ldr	r3, [r6, #0]
 8003dd2:	0608      	lsls	r0, r1, #24
 8003dd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003dd8:	d402      	bmi.n	8003de0 <_printf_i+0xe8>
 8003dda:	0649      	lsls	r1, r1, #25
 8003ddc:	bf48      	it	mi
 8003dde:	b2ad      	uxthmi	r5, r5
 8003de0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003de2:	4852      	ldr	r0, [pc, #328]	@ (8003f2c <_printf_i+0x234>)
 8003de4:	6033      	str	r3, [r6, #0]
 8003de6:	bf14      	ite	ne
 8003de8:	230a      	movne	r3, #10
 8003dea:	2308      	moveq	r3, #8
 8003dec:	2100      	movs	r1, #0
 8003dee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003df2:	6866      	ldr	r6, [r4, #4]
 8003df4:	60a6      	str	r6, [r4, #8]
 8003df6:	2e00      	cmp	r6, #0
 8003df8:	db05      	blt.n	8003e06 <_printf_i+0x10e>
 8003dfa:	6821      	ldr	r1, [r4, #0]
 8003dfc:	432e      	orrs	r6, r5
 8003dfe:	f021 0104 	bic.w	r1, r1, #4
 8003e02:	6021      	str	r1, [r4, #0]
 8003e04:	d04b      	beq.n	8003e9e <_printf_i+0x1a6>
 8003e06:	4616      	mov	r6, r2
 8003e08:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e0c:	fb03 5711 	mls	r7, r3, r1, r5
 8003e10:	5dc7      	ldrb	r7, [r0, r7]
 8003e12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e16:	462f      	mov	r7, r5
 8003e18:	42bb      	cmp	r3, r7
 8003e1a:	460d      	mov	r5, r1
 8003e1c:	d9f4      	bls.n	8003e08 <_printf_i+0x110>
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d10b      	bne.n	8003e3a <_printf_i+0x142>
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	07df      	lsls	r7, r3, #31
 8003e26:	d508      	bpl.n	8003e3a <_printf_i+0x142>
 8003e28:	6923      	ldr	r3, [r4, #16]
 8003e2a:	6861      	ldr	r1, [r4, #4]
 8003e2c:	4299      	cmp	r1, r3
 8003e2e:	bfde      	ittt	le
 8003e30:	2330      	movle	r3, #48	@ 0x30
 8003e32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e3a:	1b92      	subs	r2, r2, r6
 8003e3c:	6122      	str	r2, [r4, #16]
 8003e3e:	f8cd a000 	str.w	sl, [sp]
 8003e42:	464b      	mov	r3, r9
 8003e44:	aa03      	add	r2, sp, #12
 8003e46:	4621      	mov	r1, r4
 8003e48:	4640      	mov	r0, r8
 8003e4a:	f7ff fee7 	bl	8003c1c <_printf_common>
 8003e4e:	3001      	adds	r0, #1
 8003e50:	d14a      	bne.n	8003ee8 <_printf_i+0x1f0>
 8003e52:	f04f 30ff 	mov.w	r0, #4294967295
 8003e56:	b004      	add	sp, #16
 8003e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	f043 0320 	orr.w	r3, r3, #32
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	4832      	ldr	r0, [pc, #200]	@ (8003f30 <_printf_i+0x238>)
 8003e66:	2778      	movs	r7, #120	@ 0x78
 8003e68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	6831      	ldr	r1, [r6, #0]
 8003e70:	061f      	lsls	r7, r3, #24
 8003e72:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e76:	d402      	bmi.n	8003e7e <_printf_i+0x186>
 8003e78:	065f      	lsls	r7, r3, #25
 8003e7a:	bf48      	it	mi
 8003e7c:	b2ad      	uxthmi	r5, r5
 8003e7e:	6031      	str	r1, [r6, #0]
 8003e80:	07d9      	lsls	r1, r3, #31
 8003e82:	bf44      	itt	mi
 8003e84:	f043 0320 	orrmi.w	r3, r3, #32
 8003e88:	6023      	strmi	r3, [r4, #0]
 8003e8a:	b11d      	cbz	r5, 8003e94 <_printf_i+0x19c>
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	e7ad      	b.n	8003dec <_printf_i+0xf4>
 8003e90:	4826      	ldr	r0, [pc, #152]	@ (8003f2c <_printf_i+0x234>)
 8003e92:	e7e9      	b.n	8003e68 <_printf_i+0x170>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	f023 0320 	bic.w	r3, r3, #32
 8003e9a:	6023      	str	r3, [r4, #0]
 8003e9c:	e7f6      	b.n	8003e8c <_printf_i+0x194>
 8003e9e:	4616      	mov	r6, r2
 8003ea0:	e7bd      	b.n	8003e1e <_printf_i+0x126>
 8003ea2:	6833      	ldr	r3, [r6, #0]
 8003ea4:	6825      	ldr	r5, [r4, #0]
 8003ea6:	6961      	ldr	r1, [r4, #20]
 8003ea8:	1d18      	adds	r0, r3, #4
 8003eaa:	6030      	str	r0, [r6, #0]
 8003eac:	062e      	lsls	r6, r5, #24
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	d501      	bpl.n	8003eb6 <_printf_i+0x1be>
 8003eb2:	6019      	str	r1, [r3, #0]
 8003eb4:	e002      	b.n	8003ebc <_printf_i+0x1c4>
 8003eb6:	0668      	lsls	r0, r5, #25
 8003eb8:	d5fb      	bpl.n	8003eb2 <_printf_i+0x1ba>
 8003eba:	8019      	strh	r1, [r3, #0]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	6123      	str	r3, [r4, #16]
 8003ec0:	4616      	mov	r6, r2
 8003ec2:	e7bc      	b.n	8003e3e <_printf_i+0x146>
 8003ec4:	6833      	ldr	r3, [r6, #0]
 8003ec6:	1d1a      	adds	r2, r3, #4
 8003ec8:	6032      	str	r2, [r6, #0]
 8003eca:	681e      	ldr	r6, [r3, #0]
 8003ecc:	6862      	ldr	r2, [r4, #4]
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f7fc f97d 	bl	80001d0 <memchr>
 8003ed6:	b108      	cbz	r0, 8003edc <_printf_i+0x1e4>
 8003ed8:	1b80      	subs	r0, r0, r6
 8003eda:	6060      	str	r0, [r4, #4]
 8003edc:	6863      	ldr	r3, [r4, #4]
 8003ede:	6123      	str	r3, [r4, #16]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ee6:	e7aa      	b.n	8003e3e <_printf_i+0x146>
 8003ee8:	6923      	ldr	r3, [r4, #16]
 8003eea:	4632      	mov	r2, r6
 8003eec:	4649      	mov	r1, r9
 8003eee:	4640      	mov	r0, r8
 8003ef0:	47d0      	blx	sl
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d0ad      	beq.n	8003e52 <_printf_i+0x15a>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	079b      	lsls	r3, r3, #30
 8003efa:	d413      	bmi.n	8003f24 <_printf_i+0x22c>
 8003efc:	68e0      	ldr	r0, [r4, #12]
 8003efe:	9b03      	ldr	r3, [sp, #12]
 8003f00:	4298      	cmp	r0, r3
 8003f02:	bfb8      	it	lt
 8003f04:	4618      	movlt	r0, r3
 8003f06:	e7a6      	b.n	8003e56 <_printf_i+0x15e>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	4632      	mov	r2, r6
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	4640      	mov	r0, r8
 8003f10:	47d0      	blx	sl
 8003f12:	3001      	adds	r0, #1
 8003f14:	d09d      	beq.n	8003e52 <_printf_i+0x15a>
 8003f16:	3501      	adds	r5, #1
 8003f18:	68e3      	ldr	r3, [r4, #12]
 8003f1a:	9903      	ldr	r1, [sp, #12]
 8003f1c:	1a5b      	subs	r3, r3, r1
 8003f1e:	42ab      	cmp	r3, r5
 8003f20:	dcf2      	bgt.n	8003f08 <_printf_i+0x210>
 8003f22:	e7eb      	b.n	8003efc <_printf_i+0x204>
 8003f24:	2500      	movs	r5, #0
 8003f26:	f104 0619 	add.w	r6, r4, #25
 8003f2a:	e7f5      	b.n	8003f18 <_printf_i+0x220>
 8003f2c:	08004325 	.word	0x08004325
 8003f30:	08004336 	.word	0x08004336

08003f34 <__sflush_r>:
 8003f34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f3c:	0716      	lsls	r6, r2, #28
 8003f3e:	4605      	mov	r5, r0
 8003f40:	460c      	mov	r4, r1
 8003f42:	d454      	bmi.n	8003fee <__sflush_r+0xba>
 8003f44:	684b      	ldr	r3, [r1, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	dc02      	bgt.n	8003f50 <__sflush_r+0x1c>
 8003f4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	dd48      	ble.n	8003fe2 <__sflush_r+0xae>
 8003f50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f52:	2e00      	cmp	r6, #0
 8003f54:	d045      	beq.n	8003fe2 <__sflush_r+0xae>
 8003f56:	2300      	movs	r3, #0
 8003f58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003f5c:	682f      	ldr	r7, [r5, #0]
 8003f5e:	6a21      	ldr	r1, [r4, #32]
 8003f60:	602b      	str	r3, [r5, #0]
 8003f62:	d030      	beq.n	8003fc6 <__sflush_r+0x92>
 8003f64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	0759      	lsls	r1, r3, #29
 8003f6a:	d505      	bpl.n	8003f78 <__sflush_r+0x44>
 8003f6c:	6863      	ldr	r3, [r4, #4]
 8003f6e:	1ad2      	subs	r2, r2, r3
 8003f70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f72:	b10b      	cbz	r3, 8003f78 <__sflush_r+0x44>
 8003f74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f76:	1ad2      	subs	r2, r2, r3
 8003f78:	2300      	movs	r3, #0
 8003f7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f7c:	6a21      	ldr	r1, [r4, #32]
 8003f7e:	4628      	mov	r0, r5
 8003f80:	47b0      	blx	r6
 8003f82:	1c43      	adds	r3, r0, #1
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	d106      	bne.n	8003f96 <__sflush_r+0x62>
 8003f88:	6829      	ldr	r1, [r5, #0]
 8003f8a:	291d      	cmp	r1, #29
 8003f8c:	d82b      	bhi.n	8003fe6 <__sflush_r+0xb2>
 8003f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8004038 <__sflush_r+0x104>)
 8003f90:	40ca      	lsrs	r2, r1
 8003f92:	07d6      	lsls	r6, r2, #31
 8003f94:	d527      	bpl.n	8003fe6 <__sflush_r+0xb2>
 8003f96:	2200      	movs	r2, #0
 8003f98:	6062      	str	r2, [r4, #4]
 8003f9a:	04d9      	lsls	r1, r3, #19
 8003f9c:	6922      	ldr	r2, [r4, #16]
 8003f9e:	6022      	str	r2, [r4, #0]
 8003fa0:	d504      	bpl.n	8003fac <__sflush_r+0x78>
 8003fa2:	1c42      	adds	r2, r0, #1
 8003fa4:	d101      	bne.n	8003faa <__sflush_r+0x76>
 8003fa6:	682b      	ldr	r3, [r5, #0]
 8003fa8:	b903      	cbnz	r3, 8003fac <__sflush_r+0x78>
 8003faa:	6560      	str	r0, [r4, #84]	@ 0x54
 8003fac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003fae:	602f      	str	r7, [r5, #0]
 8003fb0:	b1b9      	cbz	r1, 8003fe2 <__sflush_r+0xae>
 8003fb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003fb6:	4299      	cmp	r1, r3
 8003fb8:	d002      	beq.n	8003fc0 <__sflush_r+0x8c>
 8003fba:	4628      	mov	r0, r5
 8003fbc:	f7ff fbf4 	bl	80037a8 <_free_r>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8003fc4:	e00d      	b.n	8003fe2 <__sflush_r+0xae>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	4628      	mov	r0, r5
 8003fca:	47b0      	blx	r6
 8003fcc:	4602      	mov	r2, r0
 8003fce:	1c50      	adds	r0, r2, #1
 8003fd0:	d1c9      	bne.n	8003f66 <__sflush_r+0x32>
 8003fd2:	682b      	ldr	r3, [r5, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0c6      	beq.n	8003f66 <__sflush_r+0x32>
 8003fd8:	2b1d      	cmp	r3, #29
 8003fda:	d001      	beq.n	8003fe0 <__sflush_r+0xac>
 8003fdc:	2b16      	cmp	r3, #22
 8003fde:	d11e      	bne.n	800401e <__sflush_r+0xea>
 8003fe0:	602f      	str	r7, [r5, #0]
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	e022      	b.n	800402c <__sflush_r+0xf8>
 8003fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fea:	b21b      	sxth	r3, r3
 8003fec:	e01b      	b.n	8004026 <__sflush_r+0xf2>
 8003fee:	690f      	ldr	r7, [r1, #16]
 8003ff0:	2f00      	cmp	r7, #0
 8003ff2:	d0f6      	beq.n	8003fe2 <__sflush_r+0xae>
 8003ff4:	0793      	lsls	r3, r2, #30
 8003ff6:	680e      	ldr	r6, [r1, #0]
 8003ff8:	bf08      	it	eq
 8003ffa:	694b      	ldreq	r3, [r1, #20]
 8003ffc:	600f      	str	r7, [r1, #0]
 8003ffe:	bf18      	it	ne
 8004000:	2300      	movne	r3, #0
 8004002:	eba6 0807 	sub.w	r8, r6, r7
 8004006:	608b      	str	r3, [r1, #8]
 8004008:	f1b8 0f00 	cmp.w	r8, #0
 800400c:	dde9      	ble.n	8003fe2 <__sflush_r+0xae>
 800400e:	6a21      	ldr	r1, [r4, #32]
 8004010:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004012:	4643      	mov	r3, r8
 8004014:	463a      	mov	r2, r7
 8004016:	4628      	mov	r0, r5
 8004018:	47b0      	blx	r6
 800401a:	2800      	cmp	r0, #0
 800401c:	dc08      	bgt.n	8004030 <__sflush_r+0xfc>
 800401e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004026:	81a3      	strh	r3, [r4, #12]
 8004028:	f04f 30ff 	mov.w	r0, #4294967295
 800402c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004030:	4407      	add	r7, r0
 8004032:	eba8 0800 	sub.w	r8, r8, r0
 8004036:	e7e7      	b.n	8004008 <__sflush_r+0xd4>
 8004038:	20400001 	.word	0x20400001

0800403c <_fflush_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	690b      	ldr	r3, [r1, #16]
 8004040:	4605      	mov	r5, r0
 8004042:	460c      	mov	r4, r1
 8004044:	b913      	cbnz	r3, 800404c <_fflush_r+0x10>
 8004046:	2500      	movs	r5, #0
 8004048:	4628      	mov	r0, r5
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	b118      	cbz	r0, 8004056 <_fflush_r+0x1a>
 800404e:	6a03      	ldr	r3, [r0, #32]
 8004050:	b90b      	cbnz	r3, 8004056 <_fflush_r+0x1a>
 8004052:	f7ff faa1 	bl	8003598 <__sinit>
 8004056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f3      	beq.n	8004046 <_fflush_r+0xa>
 800405e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004060:	07d0      	lsls	r0, r2, #31
 8004062:	d404      	bmi.n	800406e <_fflush_r+0x32>
 8004064:	0599      	lsls	r1, r3, #22
 8004066:	d402      	bmi.n	800406e <_fflush_r+0x32>
 8004068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800406a:	f7ff fb9a 	bl	80037a2 <__retarget_lock_acquire_recursive>
 800406e:	4628      	mov	r0, r5
 8004070:	4621      	mov	r1, r4
 8004072:	f7ff ff5f 	bl	8003f34 <__sflush_r>
 8004076:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004078:	07da      	lsls	r2, r3, #31
 800407a:	4605      	mov	r5, r0
 800407c:	d4e4      	bmi.n	8004048 <_fflush_r+0xc>
 800407e:	89a3      	ldrh	r3, [r4, #12]
 8004080:	059b      	lsls	r3, r3, #22
 8004082:	d4e1      	bmi.n	8004048 <_fflush_r+0xc>
 8004084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004086:	f7ff fb8d 	bl	80037a4 <__retarget_lock_release_recursive>
 800408a:	e7dd      	b.n	8004048 <_fflush_r+0xc>

0800408c <__swbuf_r>:
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	460e      	mov	r6, r1
 8004090:	4614      	mov	r4, r2
 8004092:	4605      	mov	r5, r0
 8004094:	b118      	cbz	r0, 800409e <__swbuf_r+0x12>
 8004096:	6a03      	ldr	r3, [r0, #32]
 8004098:	b90b      	cbnz	r3, 800409e <__swbuf_r+0x12>
 800409a:	f7ff fa7d 	bl	8003598 <__sinit>
 800409e:	69a3      	ldr	r3, [r4, #24]
 80040a0:	60a3      	str	r3, [r4, #8]
 80040a2:	89a3      	ldrh	r3, [r4, #12]
 80040a4:	071a      	lsls	r2, r3, #28
 80040a6:	d501      	bpl.n	80040ac <__swbuf_r+0x20>
 80040a8:	6923      	ldr	r3, [r4, #16]
 80040aa:	b943      	cbnz	r3, 80040be <__swbuf_r+0x32>
 80040ac:	4621      	mov	r1, r4
 80040ae:	4628      	mov	r0, r5
 80040b0:	f000 f82a 	bl	8004108 <__swsetup_r>
 80040b4:	b118      	cbz	r0, 80040be <__swbuf_r+0x32>
 80040b6:	f04f 37ff 	mov.w	r7, #4294967295
 80040ba:	4638      	mov	r0, r7
 80040bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	6922      	ldr	r2, [r4, #16]
 80040c2:	1a98      	subs	r0, r3, r2
 80040c4:	6963      	ldr	r3, [r4, #20]
 80040c6:	b2f6      	uxtb	r6, r6
 80040c8:	4283      	cmp	r3, r0
 80040ca:	4637      	mov	r7, r6
 80040cc:	dc05      	bgt.n	80040da <__swbuf_r+0x4e>
 80040ce:	4621      	mov	r1, r4
 80040d0:	4628      	mov	r0, r5
 80040d2:	f7ff ffb3 	bl	800403c <_fflush_r>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d1ed      	bne.n	80040b6 <__swbuf_r+0x2a>
 80040da:	68a3      	ldr	r3, [r4, #8]
 80040dc:	3b01      	subs	r3, #1
 80040de:	60a3      	str	r3, [r4, #8]
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	6022      	str	r2, [r4, #0]
 80040e6:	701e      	strb	r6, [r3, #0]
 80040e8:	6962      	ldr	r2, [r4, #20]
 80040ea:	1c43      	adds	r3, r0, #1
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d004      	beq.n	80040fa <__swbuf_r+0x6e>
 80040f0:	89a3      	ldrh	r3, [r4, #12]
 80040f2:	07db      	lsls	r3, r3, #31
 80040f4:	d5e1      	bpl.n	80040ba <__swbuf_r+0x2e>
 80040f6:	2e0a      	cmp	r6, #10
 80040f8:	d1df      	bne.n	80040ba <__swbuf_r+0x2e>
 80040fa:	4621      	mov	r1, r4
 80040fc:	4628      	mov	r0, r5
 80040fe:	f7ff ff9d 	bl	800403c <_fflush_r>
 8004102:	2800      	cmp	r0, #0
 8004104:	d0d9      	beq.n	80040ba <__swbuf_r+0x2e>
 8004106:	e7d6      	b.n	80040b6 <__swbuf_r+0x2a>

08004108 <__swsetup_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	4b29      	ldr	r3, [pc, #164]	@ (80041b0 <__swsetup_r+0xa8>)
 800410c:	4605      	mov	r5, r0
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	460c      	mov	r4, r1
 8004112:	b118      	cbz	r0, 800411c <__swsetup_r+0x14>
 8004114:	6a03      	ldr	r3, [r0, #32]
 8004116:	b90b      	cbnz	r3, 800411c <__swsetup_r+0x14>
 8004118:	f7ff fa3e 	bl	8003598 <__sinit>
 800411c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004120:	0719      	lsls	r1, r3, #28
 8004122:	d422      	bmi.n	800416a <__swsetup_r+0x62>
 8004124:	06da      	lsls	r2, r3, #27
 8004126:	d407      	bmi.n	8004138 <__swsetup_r+0x30>
 8004128:	2209      	movs	r2, #9
 800412a:	602a      	str	r2, [r5, #0]
 800412c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004130:	81a3      	strh	r3, [r4, #12]
 8004132:	f04f 30ff 	mov.w	r0, #4294967295
 8004136:	e033      	b.n	80041a0 <__swsetup_r+0x98>
 8004138:	0758      	lsls	r0, r3, #29
 800413a:	d512      	bpl.n	8004162 <__swsetup_r+0x5a>
 800413c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800413e:	b141      	cbz	r1, 8004152 <__swsetup_r+0x4a>
 8004140:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004144:	4299      	cmp	r1, r3
 8004146:	d002      	beq.n	800414e <__swsetup_r+0x46>
 8004148:	4628      	mov	r0, r5
 800414a:	f7ff fb2d 	bl	80037a8 <_free_r>
 800414e:	2300      	movs	r3, #0
 8004150:	6363      	str	r3, [r4, #52]	@ 0x34
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004158:	81a3      	strh	r3, [r4, #12]
 800415a:	2300      	movs	r3, #0
 800415c:	6063      	str	r3, [r4, #4]
 800415e:	6923      	ldr	r3, [r4, #16]
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	f043 0308 	orr.w	r3, r3, #8
 8004168:	81a3      	strh	r3, [r4, #12]
 800416a:	6923      	ldr	r3, [r4, #16]
 800416c:	b94b      	cbnz	r3, 8004182 <__swsetup_r+0x7a>
 800416e:	89a3      	ldrh	r3, [r4, #12]
 8004170:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004178:	d003      	beq.n	8004182 <__swsetup_r+0x7a>
 800417a:	4621      	mov	r1, r4
 800417c:	4628      	mov	r0, r5
 800417e:	f000 f84f 	bl	8004220 <__smakebuf_r>
 8004182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004186:	f013 0201 	ands.w	r2, r3, #1
 800418a:	d00a      	beq.n	80041a2 <__swsetup_r+0x9a>
 800418c:	2200      	movs	r2, #0
 800418e:	60a2      	str	r2, [r4, #8]
 8004190:	6962      	ldr	r2, [r4, #20]
 8004192:	4252      	negs	r2, r2
 8004194:	61a2      	str	r2, [r4, #24]
 8004196:	6922      	ldr	r2, [r4, #16]
 8004198:	b942      	cbnz	r2, 80041ac <__swsetup_r+0xa4>
 800419a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800419e:	d1c5      	bne.n	800412c <__swsetup_r+0x24>
 80041a0:	bd38      	pop	{r3, r4, r5, pc}
 80041a2:	0799      	lsls	r1, r3, #30
 80041a4:	bf58      	it	pl
 80041a6:	6962      	ldrpl	r2, [r4, #20]
 80041a8:	60a2      	str	r2, [r4, #8]
 80041aa:	e7f4      	b.n	8004196 <__swsetup_r+0x8e>
 80041ac:	2000      	movs	r0, #0
 80041ae:	e7f7      	b.n	80041a0 <__swsetup_r+0x98>
 80041b0:	20000018 	.word	0x20000018

080041b4 <_sbrk_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4d06      	ldr	r5, [pc, #24]	@ (80041d0 <_sbrk_r+0x1c>)
 80041b8:	2300      	movs	r3, #0
 80041ba:	4604      	mov	r4, r0
 80041bc:	4608      	mov	r0, r1
 80041be:	602b      	str	r3, [r5, #0]
 80041c0:	f7fd f95c 	bl	800147c <_sbrk>
 80041c4:	1c43      	adds	r3, r0, #1
 80041c6:	d102      	bne.n	80041ce <_sbrk_r+0x1a>
 80041c8:	682b      	ldr	r3, [r5, #0]
 80041ca:	b103      	cbz	r3, 80041ce <_sbrk_r+0x1a>
 80041cc:	6023      	str	r3, [r4, #0]
 80041ce:	bd38      	pop	{r3, r4, r5, pc}
 80041d0:	20000224 	.word	0x20000224

080041d4 <__swhatbuf_r>:
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	460c      	mov	r4, r1
 80041d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041dc:	2900      	cmp	r1, #0
 80041de:	b096      	sub	sp, #88	@ 0x58
 80041e0:	4615      	mov	r5, r2
 80041e2:	461e      	mov	r6, r3
 80041e4:	da0d      	bge.n	8004202 <__swhatbuf_r+0x2e>
 80041e6:	89a3      	ldrh	r3, [r4, #12]
 80041e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80041ec:	f04f 0100 	mov.w	r1, #0
 80041f0:	bf14      	ite	ne
 80041f2:	2340      	movne	r3, #64	@ 0x40
 80041f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80041f8:	2000      	movs	r0, #0
 80041fa:	6031      	str	r1, [r6, #0]
 80041fc:	602b      	str	r3, [r5, #0]
 80041fe:	b016      	add	sp, #88	@ 0x58
 8004200:	bd70      	pop	{r4, r5, r6, pc}
 8004202:	466a      	mov	r2, sp
 8004204:	f000 f848 	bl	8004298 <_fstat_r>
 8004208:	2800      	cmp	r0, #0
 800420a:	dbec      	blt.n	80041e6 <__swhatbuf_r+0x12>
 800420c:	9901      	ldr	r1, [sp, #4]
 800420e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004212:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004216:	4259      	negs	r1, r3
 8004218:	4159      	adcs	r1, r3
 800421a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800421e:	e7eb      	b.n	80041f8 <__swhatbuf_r+0x24>

08004220 <__smakebuf_r>:
 8004220:	898b      	ldrh	r3, [r1, #12]
 8004222:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004224:	079d      	lsls	r5, r3, #30
 8004226:	4606      	mov	r6, r0
 8004228:	460c      	mov	r4, r1
 800422a:	d507      	bpl.n	800423c <__smakebuf_r+0x1c>
 800422c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	6123      	str	r3, [r4, #16]
 8004234:	2301      	movs	r3, #1
 8004236:	6163      	str	r3, [r4, #20]
 8004238:	b003      	add	sp, #12
 800423a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800423c:	ab01      	add	r3, sp, #4
 800423e:	466a      	mov	r2, sp
 8004240:	f7ff ffc8 	bl	80041d4 <__swhatbuf_r>
 8004244:	9f00      	ldr	r7, [sp, #0]
 8004246:	4605      	mov	r5, r0
 8004248:	4639      	mov	r1, r7
 800424a:	4630      	mov	r0, r6
 800424c:	f7ff fb18 	bl	8003880 <_malloc_r>
 8004250:	b948      	cbnz	r0, 8004266 <__smakebuf_r+0x46>
 8004252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004256:	059a      	lsls	r2, r3, #22
 8004258:	d4ee      	bmi.n	8004238 <__smakebuf_r+0x18>
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	f043 0302 	orr.w	r3, r3, #2
 8004262:	81a3      	strh	r3, [r4, #12]
 8004264:	e7e2      	b.n	800422c <__smakebuf_r+0xc>
 8004266:	89a3      	ldrh	r3, [r4, #12]
 8004268:	6020      	str	r0, [r4, #0]
 800426a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800426e:	81a3      	strh	r3, [r4, #12]
 8004270:	9b01      	ldr	r3, [sp, #4]
 8004272:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004276:	b15b      	cbz	r3, 8004290 <__smakebuf_r+0x70>
 8004278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800427c:	4630      	mov	r0, r6
 800427e:	f000 f81d 	bl	80042bc <_isatty_r>
 8004282:	b128      	cbz	r0, 8004290 <__smakebuf_r+0x70>
 8004284:	89a3      	ldrh	r3, [r4, #12]
 8004286:	f023 0303 	bic.w	r3, r3, #3
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	81a3      	strh	r3, [r4, #12]
 8004290:	89a3      	ldrh	r3, [r4, #12]
 8004292:	431d      	orrs	r5, r3
 8004294:	81a5      	strh	r5, [r4, #12]
 8004296:	e7cf      	b.n	8004238 <__smakebuf_r+0x18>

08004298 <_fstat_r>:
 8004298:	b538      	push	{r3, r4, r5, lr}
 800429a:	4d07      	ldr	r5, [pc, #28]	@ (80042b8 <_fstat_r+0x20>)
 800429c:	2300      	movs	r3, #0
 800429e:	4604      	mov	r4, r0
 80042a0:	4608      	mov	r0, r1
 80042a2:	4611      	mov	r1, r2
 80042a4:	602b      	str	r3, [r5, #0]
 80042a6:	f7fd f8c0 	bl	800142a <_fstat>
 80042aa:	1c43      	adds	r3, r0, #1
 80042ac:	d102      	bne.n	80042b4 <_fstat_r+0x1c>
 80042ae:	682b      	ldr	r3, [r5, #0]
 80042b0:	b103      	cbz	r3, 80042b4 <_fstat_r+0x1c>
 80042b2:	6023      	str	r3, [r4, #0]
 80042b4:	bd38      	pop	{r3, r4, r5, pc}
 80042b6:	bf00      	nop
 80042b8:	20000224 	.word	0x20000224

080042bc <_isatty_r>:
 80042bc:	b538      	push	{r3, r4, r5, lr}
 80042be:	4d06      	ldr	r5, [pc, #24]	@ (80042d8 <_isatty_r+0x1c>)
 80042c0:	2300      	movs	r3, #0
 80042c2:	4604      	mov	r4, r0
 80042c4:	4608      	mov	r0, r1
 80042c6:	602b      	str	r3, [r5, #0]
 80042c8:	f7fd f8bf 	bl	800144a <_isatty>
 80042cc:	1c43      	adds	r3, r0, #1
 80042ce:	d102      	bne.n	80042d6 <_isatty_r+0x1a>
 80042d0:	682b      	ldr	r3, [r5, #0]
 80042d2:	b103      	cbz	r3, 80042d6 <_isatty_r+0x1a>
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	bd38      	pop	{r3, r4, r5, pc}
 80042d8:	20000224 	.word	0x20000224

080042dc <_init>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	bf00      	nop
 80042e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e2:	bc08      	pop	{r3}
 80042e4:	469e      	mov	lr, r3
 80042e6:	4770      	bx	lr

080042e8 <_fini>:
 80042e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ea:	bf00      	nop
 80042ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ee:	bc08      	pop	{r3}
 80042f0:	469e      	mov	lr, r3
 80042f2:	4770      	bx	lr
